{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "unset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "236": "contracts/openzeppelin/contracts/utils/structs/BitMaps.sol",
    "58": "contracts/openzeppelin/contracts/mocks/BitmapMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin/contracts/mocks/BitmapMock.sol",
    "exportedSymbols": {
      "BitMapMock": [
        7483
      ],
      "BitMaps": [
        30028
      ]
    },
    "id": 7484,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7422,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:58"
      },
      {
        "absolutePath": "contracts/openzeppelin/contracts/utils/structs/BitMaps.sol",
        "file": "../utils/structs/BitMaps.sol",
        "id": 7423,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7484,
        "sourceUnit": 30029,
        "src": "58:38:58",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "BitMapMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 7483,
        "linearizedBaseContracts": [
          7483
        ],
        "name": "BitMapMock",
        "nameLocation": "107:10:58",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 7427,
            "libraryName": {
              "id": 7424,
              "name": "BitMaps",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 30028,
              "src": "130:7:58"
            },
            "nodeType": "UsingForDirective",
            "src": "124:33:58",
            "typeName": {
              "id": 7426,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 7425,
                "name": "BitMaps.BitMap",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 29898,
                "src": "142:14:58"
              },
              "referencedDeclaration": 29898,
              "src": "142:14:58",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_BitMap_$29898_storage_ptr",
                "typeString": "struct BitMaps.BitMap"
              }
            }
          },
          {
            "constant": false,
            "id": 7430,
            "mutability": "mutable",
            "name": "_bitmap",
            "nameLocation": "186:7:58",
            "nodeType": "VariableDeclaration",
            "scope": 7483,
            "src": "163:30:58",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_BitMap_$29898_storage",
              "typeString": "struct BitMaps.BitMap"
            },
            "typeName": {
              "id": 7429,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 7428,
                "name": "BitMaps.BitMap",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 29898,
                "src": "163:14:58"
              },
              "referencedDeclaration": 29898,
              "src": "163:14:58",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_BitMap_$29898_storage_ptr",
                "typeString": "struct BitMaps.BitMap"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 7442,
              "nodeType": "Block",
              "src": "255:42:58",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7439,
                        "name": "index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7432,
                        "src": "284:5:58",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 7437,
                        "name": "_bitmap",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7430,
                        "src": "272:7:58",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BitMap_$29898_storage",
                          "typeString": "struct BitMaps.BitMap storage ref"
                        }
                      },
                      "id": 7438,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "get",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29934,
                      "src": "272:11:58",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_BitMap_$29898_storage_ptr_$_t_uint256_$returns$_t_bool_$bound_to$_t_struct$_BitMap_$29898_storage_ptr_$",
                        "typeString": "function (struct BitMaps.BitMap storage pointer,uint256) view returns (bool)"
                      }
                    },
                    "id": 7440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "272:18:58",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 7436,
                  "id": 7441,
                  "nodeType": "Return",
                  "src": "265:25:58"
                }
              ]
            },
            "functionSelector": "9507d39a",
            "id": 7443,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "get",
            "nameLocation": "209:3:58",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7433,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7432,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "221:5:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 7443,
                  "src": "213:13:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7431,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "213:7:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "212:15:58"
            },
            "returnParameters": {
              "id": 7436,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7435,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7443,
                  "src": "249:4:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7434,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "249:4:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "248:6:58"
            },
            "scope": 7483,
            "src": "200:97:58",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 7457,
              "nodeType": "Block",
              "src": "352:44:58",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7453,
                        "name": "index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7445,
                        "src": "376:5:58",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 7454,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7447,
                        "src": "383:5:58",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 7450,
                        "name": "_bitmap",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7430,
                        "src": "362:7:58",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BitMap_$29898_storage",
                          "typeString": "struct BitMaps.BitMap storage ref"
                        }
                      },
                      "id": 7452,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setTo",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29960,
                      "src": "362:13:58",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_BitMap_$29898_storage_ptr_$_t_uint256_$_t_bool_$returns$__$bound_to$_t_struct$_BitMap_$29898_storage_ptr_$",
                        "typeString": "function (struct BitMaps.BitMap storage pointer,uint256,bool)"
                      }
                    },
                    "id": 7455,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "362:27:58",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7456,
                  "nodeType": "ExpressionStatement",
                  "src": "362:27:58"
                }
              ]
            },
            "functionSelector": "dcc9d43c",
            "id": 7458,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setTo",
            "nameLocation": "312:5:58",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7448,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7445,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "326:5:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 7458,
                  "src": "318:13:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7444,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "318:7:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7447,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "338:5:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 7458,
                  "src": "333:10:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7446,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "333:4:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "317:27:58"
            },
            "returnParameters": {
              "id": 7449,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "352:0:58"
            },
            "scope": 7483,
            "src": "303:93:58",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 7469,
              "nodeType": "Block",
              "src": "437:35:58",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7466,
                        "name": "index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7460,
                        "src": "459:5:58",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 7463,
                        "name": "_bitmap",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7430,
                        "src": "447:7:58",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BitMap_$29898_storage",
                          "typeString": "struct BitMaps.BitMap storage ref"
                        }
                      },
                      "id": 7465,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "set",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29993,
                      "src": "447:11:58",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_BitMap_$29898_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_struct$_BitMap_$29898_storage_ptr_$",
                        "typeString": "function (struct BitMaps.BitMap storage pointer,uint256)"
                      }
                    },
                    "id": 7467,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "447:18:58",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7468,
                  "nodeType": "ExpressionStatement",
                  "src": "447:18:58"
                }
              ]
            },
            "functionSelector": "60fe47b1",
            "id": 7470,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "set",
            "nameLocation": "411:3:58",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7461,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7460,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "423:5:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 7470,
                  "src": "415:13:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7459,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "415:7:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "414:15:58"
            },
            "returnParameters": {
              "id": 7462,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "437:0:58"
            },
            "scope": 7483,
            "src": "402:70:58",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 7481,
              "nodeType": "Block",
              "src": "515:37:58",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7478,
                        "name": "index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7472,
                        "src": "539:5:58",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 7475,
                        "name": "_bitmap",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7430,
                        "src": "525:7:58",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BitMap_$29898_storage",
                          "typeString": "struct BitMaps.BitMap storage ref"
                        }
                      },
                      "id": 7477,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "unset",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30027,
                      "src": "525:13:58",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_BitMap_$29898_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_struct$_BitMap_$29898_storage_ptr_$",
                        "typeString": "function (struct BitMaps.BitMap storage pointer,uint256)"
                      }
                    },
                    "id": 7479,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "525:20:58",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7480,
                  "nodeType": "ExpressionStatement",
                  "src": "525:20:58"
                }
              ]
            },
            "functionSelector": "088d2255",
            "id": 7482,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "unset",
            "nameLocation": "487:5:58",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7473,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7472,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "501:5:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 7482,
                  "src": "493:13:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7471,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "493:7:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "492:15:58"
            },
            "returnParameters": {
              "id": 7474,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "515:0:58"
            },
            "scope": 7483,
            "src": "478:74:58",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 7484,
        "src": "98:456:58",
        "usedErrors": []
      }
    ],
    "src": "33:522:58"
  },
  "bytecode": "608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063088d22551461005157806360fe47b1146100845780639507d39a146100b4578063dcc9d43c146100fa575b600080fd5b61008261005f366004610167565b600881901c60009081526020819052604090208054600160ff84161b1916905550565b005b610082610092366004610167565b600881901c60009081526020819052604090208054600160ff84161b17905550565b6100e66100c2366004610167565b600881901c600090815260208190526040812054600160ff84161b16151592915050565b604051901515815260200160405180910390f35b610082610108366004610180565b61011460008383610118565b5050565b801561014257600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b60006020828403121561017957600080fd5b5035919050565b6000806040838503121561019357600080fd5b82359150602083013580151581146101aa57600080fd5b80915050925092905056fea264697066735822122032af8b8ad01ade37c7969a4bee5ca5c0269c4b2474caefb88641a4748f355ade64736f6c634300080c0033",
  "bytecodeSha1": "604f34a2b05929b70ac61326ba387407814cc62c",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "BitMapMock",
  "coverageMap": {
    "branches": {
      "236": {
        "BitMaps.setTo": {
          "7": [
            971,
            976,
            false
          ]
        }
      },
      "58": {}
    },
    "statements": {
      "236": {
        "BitMaps.get": {
          "4": [
            725,
            764
          ]
        },
        "BitMaps.set": {
          "3": [
            1288,
            1316
          ]
        },
        "BitMaps.unset": {
          "1": [
            1537,
            1566
          ]
        }
      },
      "58": {
        "BitMapMock.get": {
          "5": [
            265,
            290
          ]
        },
        "BitMapMock.set": {
          "2": [
            447,
            465
          ]
        },
        "BitMapMock.setTo": {
          "6": [
            362,
            389
          ]
        },
        "BitMapMock.unset": {
          "0": [
            525,
            545
          ]
        }
      }
    }
  },
  "dependencies": [
    "BitMaps"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061004c5760003560e01c8063088d22551461005157806360fe47b1146100845780639507d39a146100b4578063dcc9d43c146100fa575b600080fd5b61008261005f366004610167565b600881901c60009081526020819052604090208054600160ff84161b1916905550565b005b610082610092366004610167565b600881901c60009081526020819052604090208054600160ff84161b17905550565b6100e66100c2366004610167565b600881901c600090815260208190526040812054600160ff84161b16151592915050565b604051901515815260200160405180910390f35b610082610108366004610180565b61011460008383610118565b5050565b801561014257600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b60006020828403121561017957600080fd5b5035919050565b6000806040838503121561019357600080fd5b82359150602083013580151581146101aa57600080fd5b80915050925092905056fea264697066735822122032af8b8ad01ade37c7969a4bee5ca5c0269c4b2474caefb88641a4748f355ade64736f6c634300080c0033",
  "deployedSourceMap": "98:456:58:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;478:74;;;;;;:::i;:::-;1482:1:236;1473:10;;;525:7:58;1537:20:236;;;;;;;;;;:29;;1508:1;1522:4;1514:12;;1508:19;1561:5;1537:29;;;478:74:58;;;;402:70;;;;;;:::i;:::-;1233:1:236;1224:10;;;447:7:58;1288:20:236;;;;;;;;;;:28;;1259:1;1273:4;1265:12;;1259:19;1288:28;;;478:74:58;;200:97;;;;;;:::i;:::-;670:1:236;661:10;;;249:4:58;732:20:236;;;;;;;;;;;696:1;710:4;702:12;;696:19;732:27;:32;;265:25:58;200:97;-1:-1:-1;;200:97:58;;;;364:14:239;;357:22;339:41;;327:2;312:18;200:97:58;;;;;;;303:93;;;;;;:::i;:::-;362:27;:7;376:5;383;362:13;:27::i;:::-;303:93;;:::o;853:225:236:-;971:5;967:105;;;1233:1;1224:10;;;1207:14;1288:20;;;;;;;;;;:28;;1259:1;1273:4;1265:12;;1259:19;1288:28;;;853:225;;;:::o;967:105::-;1482:1;1473:10;;;1456:14;1537:20;;;;;;;;;;:29;;1508:1;1522:4;1514:12;;1508:19;1561:5;1537:29;;;853:225;;;:::o;14:180:239:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:239;;14:180;-1:-1:-1;14:180:239:o;391:341::-;456:6;464;517:2;505:9;496:7;492:23;488:32;485:52;;;533:1;530;523:12;485:52;569:9;556:23;546:33;;629:2;618:9;614:18;601:32;676:5;669:13;662:21;655:5;652:32;642:60;;698:1;695;688:12;642:60;721:5;711:15;;;391:341;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    98,
    554
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x88D2255 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x60FE47B1 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0x9507D39A EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0xDCC9D43C EQ PUSH2 0xFA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x82 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x167 JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SHR PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF DUP5 AND SHL NOT AND SWAP1 SSTORE POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0x82 PUSH2 0x92 CALLDATASIZE PUSH1 0x4 PUSH2 0x167 JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SHR PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF DUP5 AND SHL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xE6 PUSH2 0xC2 CALLDATASIZE PUSH1 0x4 PUSH2 0x167 JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SHR PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xFF DUP5 AND SHL AND ISZERO ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x82 PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x180 JUMP JUMPDEST PUSH2 0x114 PUSH1 0x0 DUP4 DUP4 PUSH2 0x118 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x8 DUP3 SWAP1 SHR PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF DUP6 AND SHL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF DUP6 AND SHL NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0xAF DUP12 DUP11 0xD0 BYTE 0xDE CALLDATACOPY 0xC7 SWAP7 SWAP11 0x4B 0xEE 0x5C 0xA5 0xC0 0x26 SWAP13 0x4B 0x24 PUSH21 0xCAEFB88641A4748F355ADE64736F6C634300080C00 CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        98,
        554
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "MSTORE",
      "path": "58"
    },
    "5": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "CALLVALUE",
      "path": "58"
    },
    "6": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "DUP1",
      "path": "58"
    },
    "7": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "ISZERO",
      "path": "58"
    },
    "8": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "JUMPI",
      "path": "58"
    },
    "12": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "DUP1",
      "path": "58"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "REVERT",
      "path": "58"
    },
    "16": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "17": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "POP",
      "path": "58"
    },
    "18": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "CALLDATASIZE",
      "path": "58"
    },
    "21": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "LT",
      "path": "58"
    },
    "22": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x4C"
    },
    "25": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "JUMPI",
      "path": "58"
    },
    "26": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "CALLDATALOAD",
      "path": "58"
    },
    "29": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "SHR",
      "path": "58"
    },
    "32": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "DUP1",
      "path": "58"
    },
    "33": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH4",
      "path": "58",
      "value": "0x88D2255"
    },
    "38": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "EQ",
      "path": "58"
    },
    "39": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x51"
    },
    "42": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "JUMPI",
      "path": "58"
    },
    "43": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "DUP1",
      "path": "58"
    },
    "44": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH4",
      "path": "58",
      "value": "0x60FE47B1"
    },
    "49": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "EQ",
      "path": "58"
    },
    "50": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x84"
    },
    "53": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "JUMPI",
      "path": "58"
    },
    "54": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "DUP1",
      "path": "58"
    },
    "55": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH4",
      "path": "58",
      "value": "0x9507D39A"
    },
    "60": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "EQ",
      "path": "58"
    },
    "61": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0xB4"
    },
    "64": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "JUMPI",
      "path": "58"
    },
    "65": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "DUP1",
      "path": "58"
    },
    "66": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH4",
      "path": "58",
      "value": "0xDCC9D43C"
    },
    "71": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "EQ",
      "path": "58"
    },
    "72": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0xFA"
    },
    "75": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "JUMPI",
      "path": "58"
    },
    "76": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "77": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x0"
    },
    "79": {
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "DUP1",
      "path": "58"
    },
    "80": {
      "first_revert": true,
      "fn": null,
      "offset": [
        98,
        554
      ],
      "op": "REVERT",
      "path": "58"
    },
    "81": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "82": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x82"
    },
    "85": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x5F"
    },
    "88": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "CALLDATASIZE",
      "path": "58"
    },
    "89": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x4"
    },
    "91": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x167"
    },
    "94": {
      "fn": "BitMapMock.unset",
      "jump": "i",
      "offset": [
        478,
        552
      ],
      "op": "JUMP",
      "path": "58"
    },
    "95": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "96": {
      "fn": "BitMaps.unset",
      "offset": [
        1482,
        1483
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x8"
    },
    "98": {
      "fn": "BitMaps.unset",
      "offset": [
        1473,
        1483
      ],
      "op": "DUP2",
      "path": "236"
    },
    "99": {
      "fn": "BitMaps.unset",
      "offset": [
        1473,
        1483
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "100": {
      "fn": "BitMaps.unset",
      "offset": [
        1473,
        1483
      ],
      "op": "SHR",
      "path": "236"
    },
    "101": {
      "fn": "BitMapMock.unset",
      "offset": [
        525,
        532
      ],
      "op": "PUSH1",
      "path": "58",
      "statement": 0,
      "value": "0x0"
    },
    "103": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "SWAP1",
      "path": "236",
      "statement": 1
    },
    "104": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "DUP2",
      "path": "236"
    },
    "105": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "MSTORE",
      "path": "236"
    },
    "106": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x20"
    },
    "108": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "DUP2",
      "path": "236"
    },
    "109": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "110": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "MSTORE",
      "path": "236"
    },
    "111": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x40"
    },
    "113": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "114": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "KECCAK256",
      "path": "236"
    },
    "115": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1566
      ],
      "op": "DUP1",
      "path": "236"
    },
    "116": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1566
      ],
      "op": "SLOAD",
      "path": "236"
    },
    "117": {
      "fn": "BitMaps.unset",
      "offset": [
        1508,
        1509
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x1"
    },
    "119": {
      "fn": "BitMaps.unset",
      "offset": [
        1522,
        1526
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0xFF"
    },
    "121": {
      "fn": "BitMaps.unset",
      "offset": [
        1514,
        1526
      ],
      "op": "DUP5",
      "path": "236"
    },
    "122": {
      "fn": "BitMaps.unset",
      "offset": [
        1514,
        1526
      ],
      "op": "AND",
      "path": "236"
    },
    "123": {
      "fn": "BitMaps.unset",
      "offset": [
        1508,
        1527
      ],
      "op": "SHL",
      "path": "236"
    },
    "124": {
      "fn": "BitMaps.unset",
      "offset": [
        1561,
        1566
      ],
      "op": "NOT",
      "path": "236"
    },
    "125": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1566
      ],
      "op": "AND",
      "path": "236"
    },
    "126": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1566
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "127": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1566
      ],
      "op": "SSTORE",
      "path": "236"
    },
    "128": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "POP",
      "path": "58"
    },
    "129": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "JUMP",
      "path": "58"
    },
    "130": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "131": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "STOP",
      "path": "58"
    },
    "132": {
      "fn": "BitMapMock.set",
      "offset": [
        402,
        472
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "133": {
      "fn": "BitMapMock.set",
      "offset": [
        402,
        472
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x82"
    },
    "136": {
      "fn": "BitMapMock.set",
      "offset": [
        402,
        472
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x92"
    },
    "139": {
      "fn": "BitMapMock.set",
      "offset": [
        402,
        472
      ],
      "op": "CALLDATASIZE",
      "path": "58"
    },
    "140": {
      "fn": "BitMapMock.set",
      "offset": [
        402,
        472
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x4"
    },
    "142": {
      "fn": "BitMapMock.set",
      "offset": [
        402,
        472
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x167"
    },
    "145": {
      "fn": "BitMapMock.set",
      "jump": "i",
      "offset": [
        402,
        472
      ],
      "op": "JUMP",
      "path": "58"
    },
    "146": {
      "fn": "BitMapMock.set",
      "offset": [
        402,
        472
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "147": {
      "fn": "BitMaps.set",
      "offset": [
        1233,
        1234
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x8"
    },
    "149": {
      "fn": "BitMaps.set",
      "offset": [
        1224,
        1234
      ],
      "op": "DUP2",
      "path": "236"
    },
    "150": {
      "fn": "BitMaps.set",
      "offset": [
        1224,
        1234
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "151": {
      "fn": "BitMaps.set",
      "offset": [
        1224,
        1234
      ],
      "op": "SHR",
      "path": "236"
    },
    "152": {
      "fn": "BitMapMock.set",
      "offset": [
        447,
        454
      ],
      "op": "PUSH1",
      "path": "58",
      "statement": 2,
      "value": "0x0"
    },
    "154": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "SWAP1",
      "path": "236",
      "statement": 3
    },
    "155": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "DUP2",
      "path": "236"
    },
    "156": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "MSTORE",
      "path": "236"
    },
    "157": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x20"
    },
    "159": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "DUP2",
      "path": "236"
    },
    "160": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "161": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "MSTORE",
      "path": "236"
    },
    "162": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x40"
    },
    "164": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "165": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "KECCAK256",
      "path": "236"
    },
    "166": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1316
      ],
      "op": "DUP1",
      "path": "236"
    },
    "167": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1316
      ],
      "op": "SLOAD",
      "path": "236"
    },
    "168": {
      "fn": "BitMaps.set",
      "offset": [
        1259,
        1260
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x1"
    },
    "170": {
      "fn": "BitMaps.set",
      "offset": [
        1273,
        1277
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0xFF"
    },
    "172": {
      "fn": "BitMaps.set",
      "offset": [
        1265,
        1277
      ],
      "op": "DUP5",
      "path": "236"
    },
    "173": {
      "fn": "BitMaps.set",
      "offset": [
        1265,
        1277
      ],
      "op": "AND",
      "path": "236"
    },
    "174": {
      "fn": "BitMaps.set",
      "offset": [
        1259,
        1278
      ],
      "op": "SHL",
      "path": "236"
    },
    "175": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1316
      ],
      "op": "OR",
      "path": "236"
    },
    "176": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1316
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "177": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1316
      ],
      "op": "SSTORE",
      "path": "236"
    },
    "178": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "POP",
      "path": "58"
    },
    "179": {
      "fn": "BitMapMock.unset",
      "offset": [
        478,
        552
      ],
      "op": "JUMP",
      "path": "58"
    },
    "180": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "181": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0xE6"
    },
    "184": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0xC2"
    },
    "187": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "CALLDATASIZE",
      "path": "58"
    },
    "188": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x4"
    },
    "190": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x167"
    },
    "193": {
      "fn": "BitMapMock.get",
      "jump": "i",
      "offset": [
        200,
        297
      ],
      "op": "JUMP",
      "path": "58"
    },
    "194": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "195": {
      "fn": "BitMaps.get",
      "offset": [
        670,
        671
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x8"
    },
    "197": {
      "fn": "BitMaps.get",
      "offset": [
        661,
        671
      ],
      "op": "DUP2",
      "path": "236"
    },
    "198": {
      "fn": "BitMaps.get",
      "offset": [
        661,
        671
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "199": {
      "fn": "BitMaps.get",
      "offset": [
        661,
        671
      ],
      "op": "SHR",
      "path": "236"
    },
    "200": {
      "fn": "BitMapMock.get",
      "offset": [
        249,
        253
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x0"
    },
    "202": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "SWAP1",
      "path": "236",
      "statement": 4
    },
    "203": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "DUP2",
      "path": "236"
    },
    "204": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "MSTORE",
      "path": "236"
    },
    "205": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x20"
    },
    "207": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "DUP2",
      "path": "236"
    },
    "208": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "209": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "MSTORE",
      "path": "236"
    },
    "210": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x40"
    },
    "212": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "DUP2",
      "path": "236"
    },
    "213": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "KECCAK256",
      "path": "236"
    },
    "214": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        752
      ],
      "op": "SLOAD",
      "path": "236"
    },
    "215": {
      "fn": "BitMaps.get",
      "offset": [
        696,
        697
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x1"
    },
    "217": {
      "fn": "BitMaps.get",
      "offset": [
        710,
        714
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0xFF"
    },
    "219": {
      "fn": "BitMaps.get",
      "offset": [
        702,
        714
      ],
      "op": "DUP5",
      "path": "236"
    },
    "220": {
      "fn": "BitMaps.get",
      "offset": [
        702,
        714
      ],
      "op": "AND",
      "path": "236"
    },
    "221": {
      "fn": "BitMaps.get",
      "offset": [
        696,
        715
      ],
      "op": "SHL",
      "path": "236"
    },
    "222": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        759
      ],
      "op": "AND",
      "path": "236"
    },
    "223": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        764
      ],
      "op": "ISZERO",
      "path": "236"
    },
    "224": {
      "fn": "BitMaps.get",
      "offset": [
        732,
        764
      ],
      "op": "ISZERO",
      "path": "236"
    },
    "225": {
      "fn": "BitMapMock.get",
      "offset": [
        265,
        290
      ],
      "op": "SWAP3",
      "path": "58",
      "statement": 5
    },
    "226": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "SWAP2",
      "path": "58"
    },
    "227": {
      "op": "POP"
    },
    "228": {
      "op": "POP"
    },
    "229": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "JUMP",
      "path": "58"
    },
    "230": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "231": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x40"
    },
    "233": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "MLOAD",
      "path": "58"
    },
    "234": {
      "op": "SWAP1"
    },
    "235": {
      "op": "ISZERO"
    },
    "236": {
      "op": "ISZERO"
    },
    "237": {
      "op": "DUP2"
    },
    "238": {
      "op": "MSTORE"
    },
    "239": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "241": {
      "op": "ADD"
    },
    "242": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x40"
    },
    "244": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "MLOAD",
      "path": "58"
    },
    "245": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "DUP1",
      "path": "58"
    },
    "246": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "SWAP2",
      "path": "58"
    },
    "247": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "SUB",
      "path": "58"
    },
    "248": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "SWAP1",
      "path": "58"
    },
    "249": {
      "fn": "BitMapMock.get",
      "offset": [
        200,
        297
      ],
      "op": "RETURN",
      "path": "58"
    },
    "250": {
      "fn": "BitMapMock.setTo",
      "offset": [
        303,
        396
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "251": {
      "fn": "BitMapMock.setTo",
      "offset": [
        303,
        396
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x82"
    },
    "254": {
      "fn": "BitMapMock.setTo",
      "offset": [
        303,
        396
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x108"
    },
    "257": {
      "fn": "BitMapMock.setTo",
      "offset": [
        303,
        396
      ],
      "op": "CALLDATASIZE",
      "path": "58"
    },
    "258": {
      "fn": "BitMapMock.setTo",
      "offset": [
        303,
        396
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x4"
    },
    "260": {
      "fn": "BitMapMock.setTo",
      "offset": [
        303,
        396
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x180"
    },
    "263": {
      "fn": "BitMapMock.setTo",
      "jump": "i",
      "offset": [
        303,
        396
      ],
      "op": "JUMP",
      "path": "58"
    },
    "264": {
      "fn": "BitMapMock.setTo",
      "offset": [
        303,
        396
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "265": {
      "fn": "BitMapMock.setTo",
      "offset": [
        362,
        389
      ],
      "op": "PUSH2",
      "path": "58",
      "statement": 6,
      "value": "0x114"
    },
    "268": {
      "fn": "BitMapMock.setTo",
      "offset": [
        362,
        369
      ],
      "op": "PUSH1",
      "path": "58",
      "value": "0x0"
    },
    "270": {
      "fn": "BitMapMock.setTo",
      "offset": [
        376,
        381
      ],
      "op": "DUP4",
      "path": "58"
    },
    "271": {
      "fn": "BitMapMock.setTo",
      "offset": [
        383,
        388
      ],
      "op": "DUP4",
      "path": "58"
    },
    "272": {
      "fn": "BitMapMock.setTo",
      "offset": [
        362,
        375
      ],
      "op": "PUSH2",
      "path": "58",
      "value": "0x118"
    },
    "275": {
      "fn": "BitMapMock.setTo",
      "jump": "i",
      "offset": [
        362,
        389
      ],
      "op": "JUMP",
      "path": "58"
    },
    "276": {
      "fn": "BitMapMock.setTo",
      "offset": [
        362,
        389
      ],
      "op": "JUMPDEST",
      "path": "58"
    },
    "277": {
      "fn": "BitMapMock.setTo",
      "offset": [
        303,
        396
      ],
      "op": "POP",
      "path": "58"
    },
    "278": {
      "fn": "BitMapMock.setTo",
      "offset": [
        303,
        396
      ],
      "op": "POP",
      "path": "58"
    },
    "279": {
      "fn": "BitMapMock.setTo",
      "jump": "o",
      "offset": [
        303,
        396
      ],
      "op": "JUMP",
      "path": "58"
    },
    "280": {
      "fn": "BitMaps.setTo",
      "offset": [
        853,
        1078
      ],
      "op": "JUMPDEST",
      "path": "236"
    },
    "281": {
      "branch": 7,
      "fn": "BitMaps.setTo",
      "offset": [
        971,
        976
      ],
      "op": "DUP1",
      "path": "236"
    },
    "282": {
      "fn": "BitMaps.setTo",
      "offset": [
        967,
        1072
      ],
      "op": "ISZERO",
      "path": "236"
    },
    "283": {
      "fn": "BitMaps.setTo",
      "offset": [
        967,
        1072
      ],
      "op": "PUSH2",
      "path": "236",
      "value": "0x142"
    },
    "286": {
      "branch": 7,
      "fn": "BitMaps.setTo",
      "offset": [
        967,
        1072
      ],
      "op": "JUMPI",
      "path": "236"
    },
    "287": {
      "fn": "BitMaps.set",
      "offset": [
        1233,
        1234
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x8"
    },
    "289": {
      "fn": "BitMaps.set",
      "offset": [
        1224,
        1234
      ],
      "op": "DUP3",
      "path": "236"
    },
    "290": {
      "fn": "BitMaps.set",
      "offset": [
        1224,
        1234
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "291": {
      "fn": "BitMaps.set",
      "offset": [
        1224,
        1234
      ],
      "op": "SHR",
      "path": "236"
    },
    "292": {
      "fn": "BitMaps.set",
      "offset": [
        1207,
        1221
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x0"
    },
    "294": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "295": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "DUP2",
      "path": "236"
    },
    "296": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "MSTORE",
      "path": "236"
    },
    "297": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x20"
    },
    "299": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "DUP5",
      "path": "236"
    },
    "300": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "301": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "MSTORE",
      "path": "236"
    },
    "302": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x40"
    },
    "304": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "305": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1308
      ],
      "op": "KECCAK256",
      "path": "236"
    },
    "306": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1316
      ],
      "op": "DUP1",
      "path": "236"
    },
    "307": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1316
      ],
      "op": "SLOAD",
      "path": "236"
    },
    "308": {
      "fn": "BitMaps.set",
      "offset": [
        1259,
        1260
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x1"
    },
    "310": {
      "fn": "BitMaps.set",
      "offset": [
        1273,
        1277
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0xFF"
    },
    "312": {
      "fn": "BitMaps.set",
      "offset": [
        1265,
        1277
      ],
      "op": "DUP6",
      "path": "236"
    },
    "313": {
      "fn": "BitMaps.set",
      "offset": [
        1265,
        1277
      ],
      "op": "AND",
      "path": "236"
    },
    "314": {
      "fn": "BitMaps.set",
      "offset": [
        1259,
        1278
      ],
      "op": "SHL",
      "path": "236"
    },
    "315": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1316
      ],
      "op": "OR",
      "path": "236"
    },
    "316": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1316
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "317": {
      "fn": "BitMaps.set",
      "offset": [
        1288,
        1316
      ],
      "op": "SSTORE",
      "path": "236"
    },
    "318": {
      "fn": "BitMaps.setTo",
      "offset": [
        853,
        1078
      ],
      "op": "POP",
      "path": "236"
    },
    "319": {
      "fn": "BitMaps.setTo",
      "offset": [
        853,
        1078
      ],
      "op": "POP",
      "path": "236"
    },
    "320": {
      "fn": "BitMaps.setTo",
      "offset": [
        853,
        1078
      ],
      "op": "POP",
      "path": "236"
    },
    "321": {
      "fn": "BitMaps.setTo",
      "jump": "o",
      "offset": [
        853,
        1078
      ],
      "op": "JUMP",
      "path": "236"
    },
    "322": {
      "fn": "BitMaps.setTo",
      "offset": [
        967,
        1072
      ],
      "op": "JUMPDEST",
      "path": "236"
    },
    "323": {
      "fn": "BitMaps.unset",
      "offset": [
        1482,
        1483
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x8"
    },
    "325": {
      "fn": "BitMaps.unset",
      "offset": [
        1473,
        1483
      ],
      "op": "DUP3",
      "path": "236"
    },
    "326": {
      "fn": "BitMaps.unset",
      "offset": [
        1473,
        1483
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "327": {
      "fn": "BitMaps.unset",
      "offset": [
        1473,
        1483
      ],
      "op": "SHR",
      "path": "236"
    },
    "328": {
      "fn": "BitMaps.unset",
      "offset": [
        1456,
        1470
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x0"
    },
    "330": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "331": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "DUP2",
      "path": "236"
    },
    "332": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "MSTORE",
      "path": "236"
    },
    "333": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x20"
    },
    "335": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "DUP5",
      "path": "236"
    },
    "336": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "337": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "MSTORE",
      "path": "236"
    },
    "338": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x40"
    },
    "340": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "341": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1557
      ],
      "op": "KECCAK256",
      "path": "236"
    },
    "342": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1566
      ],
      "op": "DUP1",
      "path": "236"
    },
    "343": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1566
      ],
      "op": "SLOAD",
      "path": "236"
    },
    "344": {
      "fn": "BitMaps.unset",
      "offset": [
        1508,
        1509
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0x1"
    },
    "346": {
      "fn": "BitMaps.unset",
      "offset": [
        1522,
        1526
      ],
      "op": "PUSH1",
      "path": "236",
      "value": "0xFF"
    },
    "348": {
      "fn": "BitMaps.unset",
      "offset": [
        1514,
        1526
      ],
      "op": "DUP6",
      "path": "236"
    },
    "349": {
      "fn": "BitMaps.unset",
      "offset": [
        1514,
        1526
      ],
      "op": "AND",
      "path": "236"
    },
    "350": {
      "fn": "BitMaps.unset",
      "offset": [
        1508,
        1527
      ],
      "op": "SHL",
      "path": "236"
    },
    "351": {
      "fn": "BitMaps.unset",
      "offset": [
        1561,
        1566
      ],
      "op": "NOT",
      "path": "236"
    },
    "352": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1566
      ],
      "op": "AND",
      "path": "236"
    },
    "353": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1566
      ],
      "op": "SWAP1",
      "path": "236"
    },
    "354": {
      "fn": "BitMaps.unset",
      "offset": [
        1537,
        1566
      ],
      "op": "SSTORE",
      "path": "236"
    },
    "355": {
      "fn": "BitMaps.setTo",
      "offset": [
        853,
        1078
      ],
      "op": "POP",
      "path": "236"
    },
    "356": {
      "fn": "BitMaps.setTo",
      "offset": [
        853,
        1078
      ],
      "op": "POP",
      "path": "236"
    },
    "357": {
      "fn": "BitMaps.setTo",
      "offset": [
        853,
        1078
      ],
      "op": "POP",
      "path": "236"
    },
    "358": {
      "fn": "BitMaps.setTo",
      "jump": "o",
      "offset": [
        853,
        1078
      ],
      "op": "JUMP",
      "path": "236"
    },
    "359": {
      "op": "JUMPDEST"
    },
    "360": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "362": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "364": {
      "op": "DUP3"
    },
    "365": {
      "op": "DUP5"
    },
    "366": {
      "op": "SUB"
    },
    "367": {
      "op": "SLT"
    },
    "368": {
      "op": "ISZERO"
    },
    "369": {
      "op": "PUSH2",
      "value": "0x179"
    },
    "372": {
      "op": "JUMPI"
    },
    "373": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "375": {
      "op": "DUP1"
    },
    "376": {
      "op": "REVERT"
    },
    "377": {
      "op": "JUMPDEST"
    },
    "378": {
      "op": "POP"
    },
    "379": {
      "op": "CALLDATALOAD"
    },
    "380": {
      "op": "SWAP2"
    },
    "381": {
      "op": "SWAP1"
    },
    "382": {
      "op": "POP"
    },
    "383": {
      "jump": "o",
      "op": "JUMP"
    },
    "384": {
      "op": "JUMPDEST"
    },
    "385": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "387": {
      "op": "DUP1"
    },
    "388": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "390": {
      "op": "DUP4"
    },
    "391": {
      "op": "DUP6"
    },
    "392": {
      "op": "SUB"
    },
    "393": {
      "op": "SLT"
    },
    "394": {
      "op": "ISZERO"
    },
    "395": {
      "op": "PUSH2",
      "value": "0x193"
    },
    "398": {
      "op": "JUMPI"
    },
    "399": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "401": {
      "op": "DUP1"
    },
    "402": {
      "op": "REVERT"
    },
    "403": {
      "op": "JUMPDEST"
    },
    "404": {
      "op": "DUP3"
    },
    "405": {
      "op": "CALLDATALOAD"
    },
    "406": {
      "op": "SWAP2"
    },
    "407": {
      "op": "POP"
    },
    "408": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "410": {
      "op": "DUP4"
    },
    "411": {
      "op": "ADD"
    },
    "412": {
      "op": "CALLDATALOAD"
    },
    "413": {
      "op": "DUP1"
    },
    "414": {
      "op": "ISZERO"
    },
    "415": {
      "op": "ISZERO"
    },
    "416": {
      "op": "DUP2"
    },
    "417": {
      "op": "EQ"
    },
    "418": {
      "op": "PUSH2",
      "value": "0x1AA"
    },
    "421": {
      "op": "JUMPI"
    },
    "422": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "424": {
      "op": "DUP1"
    },
    "425": {
      "op": "REVERT"
    },
    "426": {
      "op": "JUMPDEST"
    },
    "427": {
      "op": "DUP1"
    },
    "428": {
      "op": "SWAP2"
    },
    "429": {
      "op": "POP"
    },
    "430": {
      "op": "POP"
    },
    "431": {
      "op": "SWAP3"
    },
    "432": {
      "op": "POP"
    },
    "433": {
      "op": "SWAP3"
    },
    "434": {
      "op": "SWAP1"
    },
    "435": {
      "op": "POP"
    },
    "436": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "95649a6508ad235bbef879d655406ba602e71e21",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/structs/BitMaps.sol\";\n\ncontract BitMapMock {\n    using BitMaps for BitMaps.BitMap;\n\n    BitMaps.BitMap private _bitmap;\n\n    function get(uint256 index) public view returns (bool) {\n        return _bitmap.get(index);\n    }\n\n    function setTo(uint256 index, bool value) public {\n        _bitmap.setTo(index, value);\n    }\n\n    function set(uint256 index) public {\n        _bitmap.set(index);\n    }\n\n    function unset(uint256 index) public {\n        _bitmap.unset(index);\n    }\n}\n",
  "sourceMap": "98:456:58:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin/contracts/mocks/BitmapMock.sol",
  "type": "contract"
}