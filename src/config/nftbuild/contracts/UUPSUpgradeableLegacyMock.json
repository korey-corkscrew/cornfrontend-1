{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "current",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "139": "contracts/openzeppelin/contracts/mocks/UUPS/UUPSLegacy.sol",
    "140": "contracts/openzeppelin/contracts/mocks/UUPS/UUPSUpgradeableMock.sol",
    "148": "contracts/openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
    "156": "contracts/openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
    "206": "contracts/openzeppelin/contracts/utils/Address.sol",
    "214": "contracts/openzeppelin/contracts/utils/StorageSlot.sol",
    "48": "contracts/openzeppelin/contracts/interfaces/draft-IERC1822.sol",
    "65": "contracts/openzeppelin/contracts/mocks/CountersImpl.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin/contracts/mocks/UUPS/UUPSLegacy.sol",
    "exportedSymbols": {
      "Address": [
        26327
      ],
      "Counters": [
        26789
      ],
      "CountersImpl": [
        7916
      ],
      "ERC1967Upgrade": [
        17020
      ],
      "IBeacon": [
        17164
      ],
      "IERC1822Proxiable": [
        6872
      ],
      "StorageSlot": [
        27015
      ],
      "UUPSUpgradeable": [
        17729
      ],
      "UUPSUpgradeableLegacyMock": [
        15238
      ],
      "UUPSUpgradeableMock": [
        15254
      ],
      "UUPSUpgradeableUnsafeMock": [
        15292
      ]
    },
    "id": 15239,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 15093,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:139"
      },
      {
        "absolutePath": "contracts/openzeppelin/contracts/mocks/UUPS/UUPSUpgradeableMock.sol",
        "file": "./UUPSUpgradeableMock.sol",
        "id": 15094,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 15239,
        "sourceUnit": 15293,
        "src": "58:35:139",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 15095,
              "name": "UUPSUpgradeableMock",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 15254,
              "src": "319:19:139"
            },
            "id": 15096,
            "nodeType": "InheritanceSpecifier",
            "src": "319:19:139"
          }
        ],
        "canonicalName": "UUPSUpgradeableLegacyMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 15238,
        "linearizedBaseContracts": [
          15238,
          15254,
          17729,
          17020,
          6872,
          7916
        ],
        "name": "UUPSUpgradeableLegacyMock",
        "nameLocation": "290:25:139",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 15099,
            "mutability": "constant",
            "name": "_ROLLBACK_SLOT",
            "nameLocation": "405:14:139",
            "nodeType": "VariableDeclaration",
            "scope": 15238,
            "src": "380:108:139",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 15097,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "380:7:139",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "hexValue": "307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433",
              "id": 15098,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "422:66:139",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1",
                "typeString": "int_const 3304...(69 digits omitted)...9347"
              },
              "value": "0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 15121,
              "nodeType": "Block",
              "src": "692:196:139",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 15107,
                            "name": "newImplementation",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15101,
                            "src": "729:17:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 15105,
                            "name": "Address",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26327,
                            "src": "710:7:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_Address_$26327_$",
                              "typeString": "type(library Address)"
                            }
                          },
                          "id": 15106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "isContract",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 26050,
                          "src": "710:18:139",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address) view returns (bool)"
                          }
                        },
                        "id": 15108,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "710:37:139",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374",
                        "id": 15109,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "749:47:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65",
                          "typeString": "literal_string \"ERC1967: new implementation is not a contract\""
                        },
                        "value": "ERC1967: new implementation is not a contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65",
                          "typeString": "literal_string \"ERC1967: new implementation is not a contract\""
                        }
                      ],
                      "id": 15104,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "702:7:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 15110,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "702:95:139",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 15111,
                  "nodeType": "ExpressionStatement",
                  "src": "702:95:139"
                },
                {
                  "expression": {
                    "id": 15119,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 15115,
                            "name": "_IMPLEMENTATION_SLOT",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16716,
                            "src": "834:20:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 15112,
                            "name": "StorageSlot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 27015,
                            "src": "807:11:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_StorageSlot_$27015_$",
                              "typeString": "type(library StorageSlot)"
                            }
                          },
                          "id": 15114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "getAddressSlot",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 26981,
                          "src": "807:26:139",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$26961_storage_ptr_$",
                            "typeString": "function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"
                          }
                        },
                        "id": 15116,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "807:48:139",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_AddressSlot_$26961_storage_ptr",
                          "typeString": "struct StorageSlot.AddressSlot storage pointer"
                        }
                      },
                      "id": 15117,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 26960,
                      "src": "807:54:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 15118,
                      "name": "newImplementation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15101,
                      "src": "864:17:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "807:74:139",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 15120,
                  "nodeType": "ExpressionStatement",
                  "src": "807:74:139"
                }
              ]
            },
            "id": 15122,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__setImplementation",
            "nameLocation": "637:19:139",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15101,
                  "mutability": "mutable",
                  "name": "newImplementation",
                  "nameLocation": "665:17:139",
                  "nodeType": "VariableDeclaration",
                  "scope": 15122,
                  "src": "657:25:139",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15100,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "657:7:139",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "656:27:139"
            },
            "returnParameters": {
              "id": 15103,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "692:0:139"
            },
            "scope": 15238,
            "src": "628:260:139",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 15205,
              "nodeType": "Block",
              "src": "1036:1099:139",
              "statements": [
                {
                  "assignments": [
                    15132
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 15132,
                      "mutability": "mutable",
                      "name": "oldImplementation",
                      "nameLocation": "1054:17:139",
                      "nodeType": "VariableDeclaration",
                      "scope": 15205,
                      "src": "1046:25:139",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 15131,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1046:7:139",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 15135,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 15133,
                      "name": "_getImplementation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 16734,
                      "src": "1074:18:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 15134,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1074:20:139",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1046:48:139"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 15137,
                        "name": "newImplementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15124,
                        "src": "1167:17:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 15136,
                      "name": "__setImplementation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15122,
                      "src": "1147:19:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 15138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1147:38:139",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 15139,
                  "nodeType": "ExpressionStatement",
                  "src": "1147:38:139"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 15145,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 15143,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 15140,
                          "name": "data",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15126,
                          "src": "1199:4:139",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 15141,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "1199:11:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 15142,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1213:1:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "1199:15:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "id": 15144,
                      "name": "forceCall",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15128,
                      "src": "1218:9:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1199:28:139",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 15154,
                  "nodeType": "IfStatement",
                  "src": "1195:112:139",
                  "trueBody": {
                    "id": 15153,
                    "nodeType": "Block",
                    "src": "1229:78:139",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 15149,
                              "name": "newImplementation",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15124,
                              "src": "1272:17:139",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 15150,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15126,
                              "src": "1291:4:139",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 15146,
                              "name": "Address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26327,
                              "src": "1243:7:139",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Address_$26327_$",
                                "typeString": "type(library Address)"
                              }
                            },
                            "id": 15148,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "functionDelegateCall",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 26260,
                            "src": "1243:28:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory) returns (bytes memory)"
                            }
                          },
                          "id": 15151,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1243:53:139",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 15152,
                        "nodeType": "ExpressionStatement",
                        "src": "1243:53:139"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    15159
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 15159,
                      "mutability": "mutable",
                      "name": "rollbackTesting",
                      "nameLocation": "1409:15:139",
                      "nodeType": "VariableDeclaration",
                      "scope": 15205,
                      "src": "1377:47:139",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_BooleanSlot_$26964_storage_ptr",
                        "typeString": "struct StorageSlot.BooleanSlot"
                      },
                      "typeName": {
                        "id": 15158,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 15157,
                          "name": "StorageSlot.BooleanSlot",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 26964,
                          "src": "1377:23:139"
                        },
                        "referencedDeclaration": 26964,
                        "src": "1377:23:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BooleanSlot_$26964_storage_ptr",
                          "typeString": "struct StorageSlot.BooleanSlot"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 15164,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 15162,
                        "name": "_ROLLBACK_SLOT",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15099,
                        "src": "1454:14:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 15160,
                        "name": "StorageSlot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27015,
                        "src": "1427:11:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_StorageSlot_$27015_$",
                          "typeString": "type(library StorageSlot)"
                        }
                      },
                      "id": 15161,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getBooleanSlot",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 26992,
                      "src": "1427:26:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$26964_storage_ptr_$",
                        "typeString": "function (bytes32) pure returns (struct StorageSlot.BooleanSlot storage pointer)"
                      }
                    },
                    "id": 15163,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1427:42:139",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BooleanSlot_$26964_storage_ptr",
                      "typeString": "struct StorageSlot.BooleanSlot storage pointer"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1377:92:139"
                },
                {
                  "condition": {
                    "id": 15167,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1483:22:139",
                    "subExpression": {
                      "expression": {
                        "id": 15165,
                        "name": "rollbackTesting",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15159,
                        "src": "1484:15:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BooleanSlot_$26964_storage_ptr",
                          "typeString": "struct StorageSlot.BooleanSlot storage pointer"
                        }
                      },
                      "id": 15166,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 26963,
                      "src": "1484:21:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 15204,
                  "nodeType": "IfStatement",
                  "src": "1479:650:139",
                  "trueBody": {
                    "id": 15203,
                    "nodeType": "Block",
                    "src": "1507:622:139",
                    "statements": [
                      {
                        "expression": {
                          "id": 15172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 15168,
                              "name": "rollbackTesting",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15159,
                              "src": "1597:15:139",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_BooleanSlot_$26964_storage_ptr",
                                "typeString": "struct StorageSlot.BooleanSlot storage pointer"
                              }
                            },
                            "id": 15170,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 26963,
                            "src": "1597:21:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 15171,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1621:4:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "1597:28:139",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 15173,
                        "nodeType": "ExpressionStatement",
                        "src": "1597:28:139"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 15177,
                              "name": "newImplementation",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15124,
                              "src": "1685:17:139",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "75706772616465546f286164647265737329",
                                  "id": 15180,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1744:20:139",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_3659cfe672549963da205df855ebfb8672cda4801e0255183bd6a6f536855df7",
                                    "typeString": "literal_string \"upgradeTo(address)\""
                                  },
                                  "value": "upgradeTo(address)"
                                },
                                {
                                  "id": 15181,
                                  "name": "oldImplementation",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 15132,
                                  "src": "1766:17:139",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_3659cfe672549963da205df855ebfb8672cda4801e0255183bd6a6f536855df7",
                                    "typeString": "literal_string \"upgradeTo(address)\""
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "id": 15178,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "1720:3:139",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 15179,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSignature",
                                "nodeType": "MemberAccess",
                                "src": "1720:23:139",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (string memory) pure returns (bytes memory)"
                                }
                              },
                              "id": 15182,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1720:64:139",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 15174,
                              "name": "Address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26327,
                              "src": "1639:7:139",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Address_$26327_$",
                                "typeString": "type(library Address)"
                              }
                            },
                            "id": 15176,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "functionDelegateCall",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 26260,
                            "src": "1639:28:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory) returns (bytes memory)"
                            }
                          },
                          "id": 15183,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1639:159:139",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 15184,
                        "nodeType": "ExpressionStatement",
                        "src": "1639:159:139"
                      },
                      {
                        "expression": {
                          "id": 15189,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 15185,
                              "name": "rollbackTesting",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15159,
                              "src": "1812:15:139",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_BooleanSlot_$26964_storage_ptr",
                                "typeString": "struct StorageSlot.BooleanSlot storage pointer"
                              }
                            },
                            "id": 15187,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 26963,
                            "src": "1812:21:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 15188,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1836:5:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "1812:29:139",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 15190,
                        "nodeType": "ExpressionStatement",
                        "src": "1812:29:139"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 15195,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 15192,
                                "name": "oldImplementation",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 15132,
                                "src": "1907:17:139",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 15193,
                                  "name": "_getImplementation",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16734,
                                  "src": "1928:18:139",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 15194,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1928:20:139",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1907:41:139",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "45524331393637557067726164653a207570677261646520627265616b732066757274686572207570677261646573",
                              "id": 15196,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1950:49:139",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2425ea74e68e4bcd365d89824a06e1475543dcbb6a12bf699e5abf6b11b9b6ed",
                                "typeString": "literal_string \"ERC1967Upgrade: upgrade breaks further upgrades\""
                              },
                              "value": "ERC1967Upgrade: upgrade breaks further upgrades"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_2425ea74e68e4bcd365d89824a06e1475543dcbb6a12bf699e5abf6b11b9b6ed",
                                "typeString": "literal_string \"ERC1967Upgrade: upgrade breaks further upgrades\""
                              }
                            ],
                            "id": 15191,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1899:7:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 15197,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1899:101:139",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 15198,
                        "nodeType": "ExpressionStatement",
                        "src": "1899:101:139"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 15200,
                              "name": "newImplementation",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15124,
                              "src": "2100:17:139",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 15199,
                            "name": "_upgradeTo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16773,
                            "src": "2089:10:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 15201,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2089:29:139",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 15202,
                        "nodeType": "ExpressionStatement",
                        "src": "2089:29:139"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 15206,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_upgradeToAndCallSecureLegacyV1",
            "nameLocation": "903:31:139",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15129,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15124,
                  "mutability": "mutable",
                  "name": "newImplementation",
                  "nameLocation": "952:17:139",
                  "nodeType": "VariableDeclaration",
                  "scope": 15206,
                  "src": "944:25:139",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15123,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "944:7:139",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15126,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "992:4:139",
                  "nodeType": "VariableDeclaration",
                  "scope": 15206,
                  "src": "979:17:139",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 15125,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "979:5:139",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15128,
                  "mutability": "mutable",
                  "name": "forceCall",
                  "nameLocation": "1011:9:139",
                  "nodeType": "VariableDeclaration",
                  "scope": 15206,
                  "src": "1006:14:139",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 15127,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1006:4:139",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "934:92:139"
            },
            "returnParameters": {
              "id": 15130,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1036:0:139"
            },
            "scope": 15238,
            "src": "894:1241:139",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              17701
            ],
            "body": {
              "id": 15221,
              "nodeType": "Block",
              "src": "2251:85:139",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 15213,
                        "name": "newImplementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15208,
                        "src": "2293:17:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 15216,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2318:2:139",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "id": 15215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2312:5:139",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 15214,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "2312:5:139",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 15217,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2312:9:139",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 15218,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2323:5:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 15212,
                      "name": "_upgradeToAndCallSecureLegacyV1",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15206,
                      "src": "2261:31:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (address,bytes memory,bool)"
                      }
                    },
                    "id": 15219,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2261:68:139",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 15220,
                  "nodeType": "ExpressionStatement",
                  "src": "2261:68:139"
                }
              ]
            },
            "functionSelector": "3659cfe6",
            "id": 15222,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeTo",
            "nameLocation": "2188:9:139",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 15210,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2242:8:139"
            },
            "parameters": {
              "id": 15209,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15208,
                  "mutability": "mutable",
                  "name": "newImplementation",
                  "nameLocation": "2206:17:139",
                  "nodeType": "VariableDeclaration",
                  "scope": 15222,
                  "src": "2198:25:139",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15207,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2198:7:139",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2197:27:139"
            },
            "returnParameters": {
              "id": 15211,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2251:0:139"
            },
            "scope": 15238,
            "src": "2179:157:139",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              17722
            ],
            "body": {
              "id": 15236,
              "nodeType": "Block",
              "src": "2448:80:139",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 15231,
                        "name": "newImplementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15224,
                        "src": "2490:17:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 15232,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15226,
                        "src": "2509:4:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 15233,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2515:5:139",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 15230,
                      "name": "_upgradeToAndCallSecureLegacyV1",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15206,
                      "src": "2458:31:139",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (address,bytes memory,bool)"
                      }
                    },
                    "id": 15234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2458:63:139",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 15235,
                  "nodeType": "ExpressionStatement",
                  "src": "2458:63:139"
                }
              ]
            },
            "functionSelector": "4f1ef286",
            "id": 15237,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeToAndCall",
            "nameLocation": "2351:16:139",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 15228,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2439:8:139"
            },
            "parameters": {
              "id": 15227,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15224,
                  "mutability": "mutable",
                  "name": "newImplementation",
                  "nameLocation": "2376:17:139",
                  "nodeType": "VariableDeclaration",
                  "scope": 15237,
                  "src": "2368:25:139",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15223,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2368:7:139",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15226,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "2408:4:139",
                  "nodeType": "VariableDeclaration",
                  "scope": 15237,
                  "src": "2395:17:139",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 15225,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2395:5:139",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2367:46:139"
            },
            "returnParameters": {
              "id": 15229,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2448:0:139"
            },
            "scope": 15238,
            "src": "2342:186:139",
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 15239,
        "src": "281:2249:139",
        "usedErrors": []
      }
    ],
    "src": "33:2498:139"
  },
  "bytecode": "60a06040523060805234801561001457600080fd5b50608051610812610030600039600061016c01526108126000f3fe6080604052600436106100705760003560e01c806352d1902d1161004e57806352d1902d146100bf5780639fa6a6e3146100e6578063d09de08a146100fb578063d826f88f1461011057600080fd5b80632baeceb7146100755780633659cfe61461008c5780634f1ef286146100ac575b600080fd5b34801561008157600080fd5b5061008a610125565b005b34801561009857600080fd5b5061008a6100a7366004610623565b610131565b61008a6100ba366004610654565b61014f565b3480156100cb57600080fd5b506100d461015f565b60405190815260200160405180910390f35b3480156100f257600080fd5b506000546100d4565b34801561010757600080fd5b5061008a610217565b34801561011c57600080fd5b5061008a610225565b61012f600061022e565b565b61014c81604051806020016040528060008152506000610285565b50565b61015b82826000610285565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102045760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084015b60405180910390fd5b5060008051602061079683398151915290565b61012f600080546001019055565b61012f60008055565b80548061027d5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016101fb565b600019019055565b60006102a6600080516020610796833981519152546001600160a01b031690565b90506102b1846103e9565b6000835111806102be5750815b156102cf576102cd8484610485565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166103e257805460ff191660011781556040516001600160a01b038316602482015261034e90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052610485565b50805460ff19168155600080516020610796833981519152546001600160a01b038381169116146103d95760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016101fb565b6103e2856104b1565b5050505050565b6001600160a01b0381163b6104565760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016101fb565b60008051602061079683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60606104aa83836040518060600160405280602781526020016107b6602791396104f1565b9392505050565b6104ba816103e9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0384163b6105595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101fb565b600080856001600160a01b0316856040516105749190610746565b600060405180830381855af49150503d80600081146105af576040519150601f19603f3d011682016040523d82523d6000602084013e6105b4565b606091505b50915091506105c48282866105ce565b9695505050505050565b606083156105dd5750816104aa565b8251156105ed5782518084602001fd5b8160405162461bcd60e51b81526004016101fb9190610762565b80356001600160a01b038116811461061e57600080fd5b919050565b60006020828403121561063557600080fd5b6104aa82610607565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561066757600080fd5b61067083610607565b9150602083013567ffffffffffffffff8082111561068d57600080fd5b818501915085601f8301126106a157600080fd5b8135818111156106b3576106b361063e565b604051601f8201601f19908116603f011681019083821181831017156106db576106db61063e565b816040528281528860208487010111156106f457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015610731578181015183820152602001610719565b83811115610740576000848401525b50505050565b60008251610758818460208701610716565b9190910192915050565b6020815260008251806020840152610781816040850160208701610716565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122013a73f163aa5d71f38295b65bf55104109e23f86d94dbd061679ba2e97731a5b64736f6c634300080c0033",
  "bytecodeSha1": "f3c3604b16806f6b99f9cb28d2cc1836c9f5c0ae",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "UUPSUpgradeableLegacyMock",
  "coverageMap": {
    "branches": {
      "139": {
        "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1": {
          "23": [
            1199,
            1214,
            true
          ],
          "24": [
            1218,
            1227,
            false
          ],
          "25": [
            1484,
            1505,
            false
          ],
          "26": [
            1907,
            1948,
            true
          ]
        }
      },
      "140": {},
      "148": {},
      "156": {
        "UUPSUpgradeable.proxiableUUID": {
          "29": [
            2072,
            2095,
            true
          ]
        }
      },
      "206": {
        "Address.verifyCallResult": {
          "27": [
            7735,
            7742,
            false
          ],
          "28": [
            7876,
            7897,
            false
          ]
        }
      },
      "214": {},
      "48": {},
      "65": {}
    },
    "statements": {
      "139": {
        "UUPSUpgradeableLegacyMock.__setImplementation": {
          "14": [
            702,
            797
          ],
          "15": [
            807,
            881
          ]
        },
        "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1": {
          "6": [
            1147,
            1185
          ],
          "7": [
            1243,
            1296
          ],
          "8": [
            1597,
            1625
          ],
          "9": [
            1639,
            1798
          ],
          "10": [
            1812,
            1841
          ],
          "11": [
            1899,
            2000
          ],
          "12": [
            2089,
            2118
          ]
        },
        "UUPSUpgradeableLegacyMock.upgradeTo": {
          "1": [
            2261,
            2329
          ]
        },
        "UUPSUpgradeableLegacyMock.upgradeToAndCall": {
          "2": [
            2458,
            2521
          ]
        }
      },
      "140": {},
      "148": {
        "ERC1967Upgrade._getImplementation": {
          "5": [
            1373,
            1434
          ]
        },
        "ERC1967Upgrade._upgradeTo": {
          "17": [
            1963,
            2000
          ],
          "18": [
            2010,
            2042
          ]
        }
      },
      "156": {},
      "206": {
        "Address.functionDelegateCall": {
          "16": [
            6677,
            6761
          ],
          "19": [
            7119,
            7188
          ],
          "20": [
            7276,
            7334
          ]
        },
        "Address.isContract": {
          "13": [
            1458,
            1488
          ]
        },
        "Address.verifyCallResult": {
          "21": [
            7758,
            7775
          ],
          "22": [
            8202,
            8222
          ]
        }
      },
      "214": {},
      "48": {},
      "65": {
        "CountersImpl.decrement": {
          "0": [
            407,
            427
          ]
        },
        "CountersImpl.increment": {
          "3": [
            336,
            356
          ]
        },
        "CountersImpl.reset": {
          "4": [
            474,
            490
          ]
        }
      }
    }
  },
  "dependencies": [
    "Address",
    "CountersImpl",
    "ERC1967Upgrade",
    "IERC1822Proxiable",
    "StorageSlot",
    "UUPSUpgradeable",
    "UUPSUpgradeableMock"
  ],
  "deployedBytecode": "6080604052600436106100705760003560e01c806352d1902d1161004e57806352d1902d146100bf5780639fa6a6e3146100e6578063d09de08a146100fb578063d826f88f1461011057600080fd5b80632baeceb7146100755780633659cfe61461008c5780634f1ef286146100ac575b600080fd5b34801561008157600080fd5b5061008a610125565b005b34801561009857600080fd5b5061008a6100a7366004610623565b610131565b61008a6100ba366004610654565b61014f565b3480156100cb57600080fd5b506100d461015f565b60405190815260200160405180910390f35b3480156100f257600080fd5b506000546100d4565b34801561010757600080fd5b5061008a610217565b34801561011c57600080fd5b5061008a610225565b61012f600061022e565b565b61014c81604051806020016040528060008152506000610285565b50565b61015b82826000610285565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102045760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084015b60405180910390fd5b5060008051602061079683398151915290565b61012f600080546001019055565b61012f60008055565b80548061027d5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016101fb565b600019019055565b60006102a6600080516020610796833981519152546001600160a01b031690565b90506102b1846103e9565b6000835111806102be5750815b156102cf576102cd8484610485565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166103e257805460ff191660011781556040516001600160a01b038316602482015261034e90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052610485565b50805460ff19168155600080516020610796833981519152546001600160a01b038381169116146103d95760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016101fb565b6103e2856104b1565b5050505050565b6001600160a01b0381163b6104565760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016101fb565b60008051602061079683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60606104aa83836040518060600160405280602781526020016107b6602791396104f1565b9392505050565b6104ba816103e9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0384163b6105595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101fb565b600080856001600160a01b0316856040516105749190610746565b600060405180830381855af49150503d80600081146105af576040519150601f19603f3d011682016040523d82523d6000602084013e6105b4565b606091505b50915091506105c48282866105ce565b9695505050505050565b606083156105dd5750816104aa565b8251156105ed5782518084602001fd5b8160405162461bcd60e51b81526004016101fb9190610762565b80356001600160a01b038116811461061e57600080fd5b919050565b60006020828403121561063557600080fd5b6104aa82610607565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561066757600080fd5b61067083610607565b9150602083013567ffffffffffffffff8082111561068d57600080fd5b818501915085601f8301126106a157600080fd5b8135818111156106b3576106b361063e565b604051601f8201601f19908116603f011681019083821181831017156106db576106db61063e565b816040528281528860208487010111156106f457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015610731578181015183820152602001610719565b83811115610740576000848401525b50505050565b60008251610758818460208701610716565b9190910192915050565b6020815260008251806020840152610781816040850160208701610716565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122013a73f163aa5d71f38295b65bf55104109e23f86d94dbd061679ba2e97731a5b64736f6c634300080c0033",
  "deployedSourceMap": "281:2249:139:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;369:65:65;;;;;;;;;;;;;:::i;:::-;;2179:157:139;;;;;;;;;;-1:-1:-1;2179:157:139;;;;;:::i;:::-;;:::i;2342:186::-;;;;;;:::i;:::-;;:::i;2760:131:156:-;;;;;;;;;;;;;:::i;:::-;;;1661:25:239;;;1649:2;1634:18;2760:131:156;;;;;;;201:91:65;;;;;;;;;;-1:-1:-1;241:7:65;918:14:211;201:91:65;;298:65;;;;;;;;;;;;;:::i;440:57::-;;;;;;;;;;;;;:::i;369:65::-;407:20;:8;:18;:20::i;:::-;369:65::o;2179:157:139:-;2261:68;2293:17;2312:9;;;;;;;;;;;;2323:5;2261:31;:68::i;:::-;2179:157;:::o;2342:186::-;2458:63;2490:17;2509:4;2515:5;2458:31;:63::i;:::-;2342:186;;:::o;2760:131:156:-;2838:7;2080:4;-1:-1:-1;;;;;2089:6:156;2072:23;;2064:92;;;;-1:-1:-1;;;2064:92:156;;2081:2:239;2064:92:156;;;2063:21:239;2120:2;2100:18;;;2093:30;2159:34;2139:18;;;2132:62;2230:26;2210:18;;;2203:54;2274:19;;2064:92:156;;;;;;;;;-1:-1:-1;;;;;;;;;;;;2760:131:156;:::o;298:65:65:-;336:20;:8;1032:19:211;;1050:1;1032:19;;;945:123;440:57:65;474:16;:8;1385:1:211;1368:18;1309:84;1074:229;1153:14;;1185:9;1177:49;;;;-1:-1:-1;;;1177:49:211;;2506:2:239;1177:49:211;;;2488:21:239;2545:2;2525:18;;;2518:30;2584:29;2564:18;;;2557:57;2631:18;;1177:49:211;2304:351:239;1177:49:211;-1:-1:-1;;1277:9:211;1260:26;;1074:229::o;894:1241:139:-;1046:25;1074:20;-1:-1:-1;;;;;;;;;;;1380:54:148;-1:-1:-1;;;;;1380:54:148;;1301:140;1074:20:139;1046:48;;1147:38;1167:17;1147:19;:38::i;:::-;1213:1;1199:4;:11;:15;:28;;;;1218:9;1199:28;1195:112;;;1243:53;1272:17;1291:4;1243:28;:53::i;:::-;;1195:112;422:66;1484:21;;;;1479:650;;1597:28;;-1:-1:-1;;1597:28:139;1621:4;1597:28;;;1720:64;;-1:-1:-1;;;;;2824:32:239;;1720:64:139;;;2806:51:239;1639:159:139;;1685:17;;2779:18:239;;1720:64:139;;;-1:-1:-1;;1720:64:139;;;;;;;;;;;;;;-1:-1:-1;;;;;1720:64:139;-1:-1:-1;;;1720:64:139;;;1639:28;:159::i;:::-;-1:-1:-1;1812:29:139;;-1:-1:-1;;1812:29:139;;;-1:-1:-1;;;;;;;;;;;1380:54:148;-1:-1:-1;;;;;1907:41:139;;;1380:54:148;;1907:41:139;1899:101;;;;-1:-1:-1;;;1899:101:139;;3070:2:239;1899:101:139;;;3052:21:239;3109:2;3089:18;;;3082:30;3148:34;3128:18;;;3121:62;-1:-1:-1;;;3199:18:239;;;3192:45;3254:19;;1899:101:139;2868:411:239;1899:101:139;2089:29;2100:17;2089:10;:29::i;:::-;1036:1099;;894:1241;;;:::o;628:260::-;-1:-1:-1;;;;;1465:19:206;;;702:95:139;;;;-1:-1:-1;;;702:95:139;;3486:2:239;702:95:139;;;3468:21:239;3525:2;3505:18;;;3498:30;3564:34;3544:18;;;3537:62;-1:-1:-1;;;3615:18:239;;;3608:43;3668:19;;702:95:139;3284:409:239;702:95:139;-1:-1:-1;;;;;;;;;;;807:74:139;;-1:-1:-1;;;;;;807:74:139;-1:-1:-1;;;;;807:74:139;;;;;;;;;;628:260::o;6570:198:206:-;6653:12;6684:77;6705:6;6713:4;6684:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6677:84;6570:198;-1:-1:-1;;;6570:198:206:o;1897:152:148:-;1963:37;1982:17;1963:18;:37::i;:::-;2015:27;;-1:-1:-1;;;;;2015:27:148;;;;;;;;1897:152;:::o;6954:387:206:-;7095:12;-1:-1:-1;;;;;1465:19:206;;;7119:69;;;;-1:-1:-1;;;7119:69:206;;3900:2:239;7119:69:206;;;3882:21:239;3939:2;3919:18;;;3912:30;3978:34;3958:18;;;3951:62;-1:-1:-1;;;4029:18:239;;;4022:36;4075:19;;7119:69:206;3698:402:239;7119:69:206;7200:12;7214:23;7241:6;-1:-1:-1;;;;;7241:19:206;7261:4;7241:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7199:67;;;;7283:51;7300:7;7309:10;7321:12;7283:16;:51::i;:::-;7276:58;6954:387;-1:-1:-1;;;;;;6954:387:206:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:206;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:206;;;;;;;;:::i;14:173:239:-;82:20;;-1:-1:-1;;;;;131:31:239;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;383:127::-;444:10;439:3;435:20;432:1;425:31;475:4;472:1;465:15;499:4;496:1;489:15;515:995;592:6;600;653:2;641:9;632:7;628:23;624:32;621:52;;;669:1;666;659:12;621:52;692:29;711:9;692:29;:::i;:::-;682:39;;772:2;761:9;757:18;744:32;795:18;836:2;828:6;825:14;822:34;;;852:1;849;842:12;822:34;890:6;879:9;875:22;865:32;;935:7;928:4;924:2;920:13;916:27;906:55;;957:1;954;947:12;906:55;993:2;980:16;1015:2;1011;1008:10;1005:36;;;1021:18;;:::i;:::-;1096:2;1090:9;1064:2;1150:13;;-1:-1:-1;;1146:22:239;;;1170:2;1142:31;1138:40;1126:53;;;1194:18;;;1214:22;;;1191:46;1188:72;;;1240:18;;:::i;:::-;1280:10;1276:2;1269:22;1315:2;1307:6;1300:18;1355:7;1350:2;1345;1341;1337:11;1333:20;1330:33;1327:53;;;1376:1;1373;1366:12;1327:53;1432:2;1427;1423;1419:11;1414:2;1406:6;1402:15;1389:46;1477:1;1472:2;1467;1459:6;1455:15;1451:24;1444:35;1498:6;1488:16;;;;;;;515:995;;;;;:::o;4105:258::-;4177:1;4187:113;4201:6;4198:1;4195:13;4187:113;;;4277:11;;;4271:18;4258:11;;;4251:39;4223:2;4216:10;4187:113;;;4318:6;4315:1;4312:13;4309:48;;;4353:1;4344:6;4339:3;4335:16;4328:27;4309:48;;4105:258;;;:::o;4368:274::-;4497:3;4535:6;4529:13;4551:53;4597:6;4592:3;4585:4;4577:6;4573:17;4551:53;:::i;:::-;4620:16;;;;;4368:274;-1:-1:-1;;4368:274:239:o;4647:383::-;4796:2;4785:9;4778:21;4759:4;4828:6;4822:13;4871:6;4866:2;4855:9;4851:18;4844:34;4887:66;4946:6;4941:2;4930:9;4926:18;4921:2;4913:6;4909:15;4887:66;:::i;:::-;5014:2;4993:15;-1:-1:-1;;4989:29:239;4974:45;;;;5021:2;4970:54;;4647:383;-1:-1:-1;;4647:383:239:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "offset": [
    281,
    2530
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x52D1902D GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0x9FA6A6E3 EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0xD09DE08A EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0xD826F88F EQ PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BAECEB7 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0xAC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x125 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0xA7 CALLDATASIZE PUSH1 0x4 PUSH2 0x623 JUMP JUMPDEST PUSH2 0x131 JUMP JUMPDEST PUSH2 0x8A PUSH2 0xBA CALLDATASIZE PUSH1 0x4 PUSH2 0x654 JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD4 PUSH2 0x15F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0xD4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x217 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x225 JUMP JUMPDEST PUSH2 0x12F PUSH1 0x0 PUSH2 0x22E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x14C DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x0 PUSH2 0x285 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x15B DUP3 DUP3 PUSH1 0x0 PUSH2 0x285 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x204 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x796 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x12F PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x12F PUSH1 0x0 DUP1 SSTORE JUMP JUMPDEST DUP1 SLOAD DUP1 PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F756E7465723A2064656372656D656E74206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1FB JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x796 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B1 DUP5 PUSH2 0x3E9 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT DUP1 PUSH2 0x2BE JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 0x2CF JUMPI PUSH2 0x2CD DUP5 DUP5 PUSH2 0x485 JUMP JUMPDEST POP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x3E2 JUMPI DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x34E SWAP1 DUP7 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL OR SWAP1 MSTORE PUSH2 0x485 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x796 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ PUSH2 0x3D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A207570677261646520627265616B732066 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x757274686572207570677261646573 PUSH1 0x88 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x3E2 DUP6 PUSH2 0x4B1 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x456 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1FB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x796 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4AA DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7B6 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x4F1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x4BA DUP2 PUSH2 0x3E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x559 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1FB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x746 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5AF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5B4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x5C4 DUP3 DUP3 DUP7 PUSH2 0x5CE JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x5DD JUMPI POP DUP2 PUSH2 0x4AA JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x5ED JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x762 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x61E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4AA DUP3 PUSH2 0x607 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x670 DUP4 PUSH2 0x607 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x68D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x6B3 JUMPI PUSH2 0x6B3 PUSH2 0x63E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x6DB JUMPI PUSH2 0x6DB PUSH2 0x63E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x731 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x719 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x740 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x758 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x716 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x781 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x716 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A264697066735822122013 0xA7 EXTCODEHASH AND GASPRICE 0xA5 0xD7 0x1F CODESIZE 0x29 JUMPDEST PUSH6 0xBF55104109E2 EXTCODEHASH DUP7 0xD9 0x4D 0xBD MOD AND PUSH26 0xBA2E97731A5B64736F6C634300080C0033000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        281,
        2530
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "MSTORE",
      "path": "139"
    },
    "5": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "CALLDATASIZE",
      "path": "139"
    },
    "8": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "LT",
      "path": "139"
    },
    "9": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x70"
    },
    "12": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "13": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "CALLDATALOAD",
      "path": "139"
    },
    "16": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "SHR",
      "path": "139"
    },
    "19": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "DUP1",
      "path": "139"
    },
    "20": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH4",
      "path": "139",
      "value": "0x52D1902D"
    },
    "25": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "GT",
      "path": "139"
    },
    "26": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x4E"
    },
    "29": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "30": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "DUP1",
      "path": "139"
    },
    "31": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH4",
      "path": "139",
      "value": "0x52D1902D"
    },
    "36": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "EQ",
      "path": "139"
    },
    "37": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0xBF"
    },
    "40": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "41": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "DUP1",
      "path": "139"
    },
    "42": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH4",
      "path": "139",
      "value": "0x9FA6A6E3"
    },
    "47": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "EQ",
      "path": "139"
    },
    "48": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0xE6"
    },
    "51": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "52": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "DUP1",
      "path": "139"
    },
    "53": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH4",
      "path": "139",
      "value": "0xD09DE08A"
    },
    "58": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "EQ",
      "path": "139"
    },
    "59": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0xFB"
    },
    "62": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "63": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "DUP1",
      "path": "139"
    },
    "64": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH4",
      "path": "139",
      "value": "0xD826F88F"
    },
    "69": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "EQ",
      "path": "139"
    },
    "70": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x110"
    },
    "73": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "74": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x0"
    },
    "76": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "DUP1",
      "path": "139"
    },
    "77": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "REVERT",
      "path": "139"
    },
    "78": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "79": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "DUP1",
      "path": "139"
    },
    "80": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH4",
      "path": "139",
      "value": "0x2BAECEB7"
    },
    "85": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "EQ",
      "path": "139"
    },
    "86": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x75"
    },
    "89": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "90": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "DUP1",
      "path": "139"
    },
    "91": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH4",
      "path": "139",
      "value": "0x3659CFE6"
    },
    "96": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "EQ",
      "path": "139"
    },
    "97": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x8C"
    },
    "100": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "101": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "DUP1",
      "path": "139"
    },
    "102": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH4",
      "path": "139",
      "value": "0x4F1EF286"
    },
    "107": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "EQ",
      "path": "139"
    },
    "108": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0xAC"
    },
    "111": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "112": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "113": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x0"
    },
    "115": {
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "DUP1",
      "path": "139"
    },
    "116": {
      "first_revert": true,
      "fn": null,
      "offset": [
        281,
        2530
      ],
      "op": "REVERT",
      "path": "139"
    },
    "117": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "118": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "CALLVALUE",
      "path": "65"
    },
    "119": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "DUP1",
      "path": "65"
    },
    "120": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "ISZERO",
      "path": "65"
    },
    "121": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x81"
    },
    "124": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "125": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "127": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "DUP1",
      "path": "65"
    },
    "128": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "REVERT",
      "path": "65"
    },
    "129": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "130": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "POP",
      "path": "65"
    },
    "131": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x8A"
    },
    "134": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x125"
    },
    "137": {
      "fn": "CountersImpl.decrement",
      "jump": "i",
      "offset": [
        369,
        434
      ],
      "op": "JUMP",
      "path": "65"
    },
    "138": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "139": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "STOP",
      "path": "65"
    },
    "140": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "141": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "CALLVALUE",
      "path": "139"
    },
    "142": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "DUP1",
      "path": "139"
    },
    "143": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "ISZERO",
      "path": "139"
    },
    "144": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x98"
    },
    "147": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "148": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x0"
    },
    "150": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "DUP1",
      "path": "139"
    },
    "151": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "REVERT",
      "path": "139"
    },
    "152": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "153": {
      "op": "POP"
    },
    "154": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x8A"
    },
    "157": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0xA7"
    },
    "160": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "CALLDATASIZE",
      "path": "139"
    },
    "161": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x4"
    },
    "163": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x623"
    },
    "166": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "jump": "i",
      "offset": [
        2179,
        2336
      ],
      "op": "JUMP",
      "path": "139"
    },
    "167": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "168": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x131"
    },
    "171": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "jump": "i",
      "offset": [
        2179,
        2336
      ],
      "op": "JUMP",
      "path": "139"
    },
    "172": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "173": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x8A"
    },
    "176": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0xBA"
    },
    "179": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "CALLDATASIZE",
      "path": "139"
    },
    "180": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x4"
    },
    "182": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x654"
    },
    "185": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "jump": "i",
      "offset": [
        2342,
        2528
      ],
      "op": "JUMP",
      "path": "139"
    },
    "186": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "187": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x14F"
    },
    "190": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "jump": "i",
      "offset": [
        2342,
        2528
      ],
      "op": "JUMP",
      "path": "139"
    },
    "191": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "JUMPDEST",
      "path": "156"
    },
    "192": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "CALLVALUE",
      "path": "156"
    },
    "193": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "DUP1",
      "path": "156"
    },
    "194": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "ISZERO",
      "path": "156"
    },
    "195": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "PUSH2",
      "path": "156",
      "value": "0xCB"
    },
    "198": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "JUMPI",
      "path": "156"
    },
    "199": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "PUSH1",
      "path": "156",
      "value": "0x0"
    },
    "201": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "DUP1",
      "path": "156"
    },
    "202": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "REVERT",
      "path": "156"
    },
    "203": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "JUMPDEST",
      "path": "156"
    },
    "204": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "POP",
      "path": "156"
    },
    "205": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "PUSH2",
      "path": "156",
      "value": "0xD4"
    },
    "208": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "PUSH2",
      "path": "156",
      "value": "0x15F"
    },
    "211": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "jump": "i",
      "offset": [
        2760,
        2891
      ],
      "op": "JUMP",
      "path": "156"
    },
    "212": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "JUMPDEST",
      "path": "156"
    },
    "213": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "PUSH1",
      "path": "156",
      "value": "0x40"
    },
    "215": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "MLOAD",
      "path": "156"
    },
    "216": {
      "op": "SWAP1"
    },
    "217": {
      "op": "DUP2"
    },
    "218": {
      "op": "MSTORE"
    },
    "219": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "221": {
      "op": "ADD"
    },
    "222": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "PUSH1",
      "path": "156",
      "value": "0x40"
    },
    "224": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "MLOAD",
      "path": "156"
    },
    "225": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "DUP1",
      "path": "156"
    },
    "226": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "SWAP2",
      "path": "156"
    },
    "227": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "SUB",
      "path": "156"
    },
    "228": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "SWAP1",
      "path": "156"
    },
    "229": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "RETURN",
      "path": "156"
    },
    "230": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "231": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "CALLVALUE",
      "path": "65"
    },
    "232": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "DUP1",
      "path": "65"
    },
    "233": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "ISZERO",
      "path": "65"
    },
    "234": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xF2"
    },
    "237": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "238": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "240": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "DUP1",
      "path": "65"
    },
    "241": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "REVERT",
      "path": "65"
    },
    "242": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "243": {
      "op": "POP"
    },
    "244": {
      "fn": "CountersImpl.current",
      "offset": [
        241,
        248
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "246": {
      "op": "SLOAD"
    },
    "247": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xD4"
    },
    "250": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "JUMP",
      "path": "65"
    },
    "251": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "252": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "CALLVALUE",
      "path": "65"
    },
    "253": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "DUP1",
      "path": "65"
    },
    "254": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "ISZERO",
      "path": "65"
    },
    "255": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x107"
    },
    "258": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "259": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "261": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "DUP1",
      "path": "65"
    },
    "262": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "REVERT",
      "path": "65"
    },
    "263": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "264": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "POP",
      "path": "65"
    },
    "265": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x8A"
    },
    "268": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x217"
    },
    "271": {
      "fn": "CountersImpl.increment",
      "jump": "i",
      "offset": [
        298,
        363
      ],
      "op": "JUMP",
      "path": "65"
    },
    "272": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "273": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "CALLVALUE",
      "path": "65"
    },
    "274": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "DUP1",
      "path": "65"
    },
    "275": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "ISZERO",
      "path": "65"
    },
    "276": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x11C"
    },
    "279": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "280": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "282": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "DUP1",
      "path": "65"
    },
    "283": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "REVERT",
      "path": "65"
    },
    "284": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "285": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "POP",
      "path": "65"
    },
    "286": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x8A"
    },
    "289": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x225"
    },
    "292": {
      "fn": "CountersImpl.reset",
      "jump": "i",
      "offset": [
        440,
        497
      ],
      "op": "JUMP",
      "path": "65"
    },
    "293": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "294": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        427
      ],
      "op": "PUSH2",
      "path": "65",
      "statement": 0,
      "value": "0x12F"
    },
    "297": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        415
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "299": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        425
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x22E"
    },
    "302": {
      "fn": "CountersImpl.decrement",
      "jump": "i",
      "offset": [
        407,
        427
      ],
      "op": "JUMP",
      "path": "65"
    },
    "303": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        427
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "304": {
      "fn": "CountersImpl.decrement",
      "jump": "o",
      "offset": [
        369,
        434
      ],
      "op": "JUMP",
      "path": "65"
    },
    "305": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "306": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2261,
        2329
      ],
      "op": "PUSH2",
      "path": "139",
      "statement": 1,
      "value": "0x14C"
    },
    "309": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2293,
        2310
      ],
      "op": "DUP2",
      "path": "139"
    },
    "310": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x40"
    },
    "312": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "MLOAD",
      "path": "139"
    },
    "313": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "DUP1",
      "path": "139"
    },
    "314": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x20"
    },
    "316": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "ADD",
      "path": "139"
    },
    "317": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x40"
    },
    "319": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "MSTORE",
      "path": "139"
    },
    "320": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "DUP1",
      "path": "139"
    },
    "321": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x0"
    },
    "323": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "DUP2",
      "path": "139"
    },
    "324": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "MSTORE",
      "path": "139"
    },
    "325": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2312,
        2321
      ],
      "op": "POP",
      "path": "139"
    },
    "326": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2323,
        2328
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x0"
    },
    "328": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2261,
        2292
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x285"
    },
    "331": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "jump": "i",
      "offset": [
        2261,
        2329
      ],
      "op": "JUMP",
      "path": "139"
    },
    "332": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2261,
        2329
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "333": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "offset": [
        2179,
        2336
      ],
      "op": "POP",
      "path": "139"
    },
    "334": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeTo",
      "jump": "o",
      "offset": [
        2179,
        2336
      ],
      "op": "JUMP",
      "path": "139"
    },
    "335": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "336": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2458,
        2521
      ],
      "op": "PUSH2",
      "path": "139",
      "statement": 2,
      "value": "0x15B"
    },
    "339": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2490,
        2507
      ],
      "op": "DUP3",
      "path": "139"
    },
    "340": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2509,
        2513
      ],
      "op": "DUP3",
      "path": "139"
    },
    "341": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2515,
        2520
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x0"
    },
    "343": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2458,
        2489
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x285"
    },
    "346": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "jump": "i",
      "offset": [
        2458,
        2521
      ],
      "op": "JUMP",
      "path": "139"
    },
    "347": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2458,
        2521
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "348": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "POP",
      "path": "139"
    },
    "349": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "offset": [
        2342,
        2528
      ],
      "op": "POP",
      "path": "139"
    },
    "350": {
      "fn": "UUPSUpgradeableLegacyMock.upgradeToAndCall",
      "jump": "o",
      "offset": [
        2342,
        2528
      ],
      "op": "JUMP",
      "path": "139"
    },
    "351": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "JUMPDEST",
      "path": "156"
    },
    "352": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2838,
        2845
      ],
      "op": "PUSH1",
      "path": "156",
      "value": "0x0"
    },
    "354": {
      "offset": [
        2080,
        2084
      ],
      "op": "ADDRESS",
      "path": "156"
    },
    "355": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "357": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "359": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "361": {
      "op": "SHL"
    },
    "362": {
      "op": "SUB"
    },
    "363": {
      "offset": [
        2089,
        2095
      ],
      "op": "PUSH32",
      "path": "156",
      "value": "0x0"
    },
    "396": {
      "offset": [
        2072,
        2095
      ],
      "op": "AND",
      "path": "156"
    },
    "397": {
      "branch": 29,
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2072,
        2095
      ],
      "op": "EQ",
      "path": "156"
    },
    "398": {
      "offset": [
        2064,
        2156
      ],
      "op": "PUSH2",
      "path": "156",
      "value": "0x204"
    },
    "401": {
      "branch": 29,
      "offset": [
        2064,
        2156
      ],
      "op": "JUMPI",
      "path": "156"
    },
    "402": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "PUSH1",
      "path": "156",
      "value": "0x40"
    },
    "404": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "MLOAD",
      "path": "156"
    },
    "405": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "409": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "411": {
      "op": "SHL"
    },
    "412": {
      "offset": [
        2064,
        2156
      ],
      "op": "DUP2",
      "path": "156"
    },
    "413": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "MSTORE",
      "path": "156"
    },
    "414": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "416": {
      "offset": [
        2064,
        2156
      ],
      "op": "PUSH1",
      "path": "156",
      "value": "0x4"
    },
    "418": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "DUP3",
      "path": "156"
    },
    "419": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "ADD",
      "path": "156"
    },
    "420": {
      "op": "MSTORE"
    },
    "421": {
      "op": "PUSH1",
      "value": "0x38"
    },
    "423": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "425": {
      "op": "DUP3"
    },
    "426": {
      "op": "ADD"
    },
    "427": {
      "op": "MSTORE"
    },
    "428": {
      "op": "PUSH32",
      "value": "0x555550535570677261646561626C653A206D757374206E6F742062652063616C"
    },
    "461": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "463": {
      "op": "DUP3"
    },
    "464": {
      "op": "ADD"
    },
    "465": {
      "op": "MSTORE"
    },
    "466": {
      "op": "PUSH32",
      "value": "0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000"
    },
    "499": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "501": {
      "op": "DUP3"
    },
    "502": {
      "op": "ADD"
    },
    "503": {
      "op": "MSTORE"
    },
    "504": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "506": {
      "op": "ADD"
    },
    "507": {
      "offset": [
        2064,
        2156
      ],
      "op": "JUMPDEST",
      "path": "156"
    },
    "508": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "PUSH1",
      "path": "156",
      "value": "0x40"
    },
    "510": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "MLOAD",
      "path": "156"
    },
    "511": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "DUP1",
      "path": "156"
    },
    "512": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "SWAP2",
      "path": "156"
    },
    "513": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "SUB",
      "path": "156"
    },
    "514": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "SWAP1",
      "path": "156"
    },
    "515": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "156"
    },
    "516": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2064,
        2156
      ],
      "op": "JUMPDEST",
      "path": "156"
    },
    "517": {
      "op": "POP"
    },
    "518": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "520": {
      "op": "DUP1"
    },
    "521": {
      "op": "MLOAD"
    },
    "522": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "524": {
      "op": "PUSH2",
      "value": "0x796"
    },
    "527": {
      "op": "DUP4"
    },
    "528": {
      "op": "CODECOPY"
    },
    "529": {
      "op": "DUP2"
    },
    "530": {
      "op": "MLOAD"
    },
    "531": {
      "op": "SWAP2"
    },
    "532": {
      "op": "MSTORE"
    },
    "533": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "offset": [
        2760,
        2891
      ],
      "op": "SWAP1",
      "path": "156"
    },
    "534": {
      "fn": "UUPSUpgradeable.proxiableUUID",
      "jump": "o",
      "offset": [
        2760,
        2891
      ],
      "op": "JUMP",
      "path": "156"
    },
    "535": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "536": {
      "fn": "CountersImpl.increment",
      "offset": [
        336,
        356
      ],
      "op": "PUSH2",
      "path": "65",
      "statement": 3,
      "value": "0x12F"
    },
    "539": {
      "fn": "CountersImpl.increment",
      "offset": [
        336,
        344
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "541": {
      "op": "DUP1"
    },
    "542": {
      "op": "SLOAD"
    },
    "543": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "545": {
      "op": "ADD"
    },
    "546": {
      "op": "SWAP1"
    },
    "547": {
      "op": "SSTORE"
    },
    "548": {
      "op": "JUMP"
    },
    "549": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "550": {
      "fn": "CountersImpl.reset",
      "offset": [
        474,
        490
      ],
      "op": "PUSH2",
      "path": "65",
      "statement": 4,
      "value": "0x12F"
    },
    "553": {
      "fn": "CountersImpl.reset",
      "offset": [
        474,
        482
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "555": {
      "op": "DUP1"
    },
    "556": {
      "op": "SSTORE"
    },
    "557": {
      "op": "JUMP"
    },
    "558": {
      "op": "JUMPDEST"
    },
    "559": {
      "op": "DUP1"
    },
    "560": {
      "op": "SLOAD"
    },
    "561": {
      "op": "DUP1"
    },
    "562": {
      "op": "PUSH2",
      "value": "0x27D"
    },
    "565": {
      "op": "JUMPI"
    },
    "566": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "568": {
      "op": "MLOAD"
    },
    "569": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "573": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "575": {
      "op": "SHL"
    },
    "576": {
      "op": "DUP2"
    },
    "577": {
      "op": "MSTORE"
    },
    "578": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "580": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "582": {
      "op": "DUP3"
    },
    "583": {
      "op": "ADD"
    },
    "584": {
      "op": "MSTORE"
    },
    "585": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "587": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "589": {
      "op": "DUP3"
    },
    "590": {
      "op": "ADD"
    },
    "591": {
      "op": "MSTORE"
    },
    "592": {
      "op": "PUSH32",
      "value": "0x436F756E7465723A2064656372656D656E74206F766572666C6F770000000000"
    },
    "625": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "627": {
      "op": "DUP3"
    },
    "628": {
      "op": "ADD"
    },
    "629": {
      "op": "MSTORE"
    },
    "630": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "632": {
      "op": "ADD"
    },
    "633": {
      "op": "PUSH2",
      "value": "0x1FB"
    },
    "636": {
      "op": "JUMP"
    },
    "637": {
      "op": "JUMPDEST"
    },
    "638": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "640": {
      "op": "NOT"
    },
    "641": {
      "op": "ADD"
    },
    "642": {
      "op": "SWAP1"
    },
    "643": {
      "op": "SSTORE"
    },
    "644": {
      "jump": "o",
      "op": "JUMP"
    },
    "645": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        894,
        2135
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "646": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1046,
        1071
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x0"
    },
    "648": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1074,
        1094
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x2A6"
    },
    "651": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "653": {
      "op": "DUP1"
    },
    "654": {
      "op": "MLOAD"
    },
    "655": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "657": {
      "op": "PUSH2",
      "value": "0x796"
    },
    "660": {
      "op": "DUP4"
    },
    "661": {
      "op": "CODECOPY"
    },
    "662": {
      "op": "DUP2"
    },
    "663": {
      "op": "MLOAD"
    },
    "664": {
      "op": "SWAP2"
    },
    "665": {
      "op": "MSTORE"
    },
    "666": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1380,
        1434
      ],
      "op": "SLOAD",
      "path": "148",
      "statement": 5
    },
    "667": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "669": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "671": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "673": {
      "op": "SHL"
    },
    "674": {
      "op": "SUB"
    },
    "675": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1380,
        1434
      ],
      "op": "AND",
      "path": "148"
    },
    "676": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1380,
        1434
      ],
      "op": "SWAP1",
      "path": "148"
    },
    "677": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1301,
        1441
      ],
      "op": "JUMP",
      "path": "148"
    },
    "678": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1074,
        1094
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "679": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1046,
        1094
      ],
      "op": "SWAP1",
      "path": "139"
    },
    "680": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1046,
        1094
      ],
      "op": "POP",
      "path": "139"
    },
    "681": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1147,
        1185
      ],
      "op": "PUSH2",
      "path": "139",
      "statement": 6,
      "value": "0x2B1"
    },
    "684": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1167,
        1184
      ],
      "op": "DUP5",
      "path": "139"
    },
    "685": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1147,
        1166
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x3E9"
    },
    "688": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "jump": "i",
      "offset": [
        1147,
        1185
      ],
      "op": "JUMP",
      "path": "139"
    },
    "689": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1147,
        1185
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "690": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1213,
        1214
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x0"
    },
    "692": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1199,
        1203
      ],
      "op": "DUP4",
      "path": "139"
    },
    "693": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1199,
        1210
      ],
      "op": "MLOAD",
      "path": "139"
    },
    "694": {
      "branch": 23,
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1199,
        1214
      ],
      "op": "GT",
      "path": "139"
    },
    "695": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1199,
        1227
      ],
      "op": "DUP1",
      "path": "139"
    },
    "696": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1199,
        1227
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x2BE"
    },
    "699": {
      "branch": 23,
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1199,
        1227
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "700": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1199,
        1227
      ],
      "op": "POP",
      "path": "139"
    },
    "701": {
      "branch": 24,
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1218,
        1227
      ],
      "op": "DUP2",
      "path": "139"
    },
    "702": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1199,
        1227
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "703": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1195,
        1307
      ],
      "op": "ISZERO",
      "path": "139"
    },
    "704": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1195,
        1307
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x2CF"
    },
    "707": {
      "branch": 24,
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1195,
        1307
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "708": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1243,
        1296
      ],
      "op": "PUSH2",
      "path": "139",
      "statement": 7,
      "value": "0x2CD"
    },
    "711": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1272,
        1289
      ],
      "op": "DUP5",
      "path": "139"
    },
    "712": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1291,
        1295
      ],
      "op": "DUP5",
      "path": "139"
    },
    "713": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1243,
        1271
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x485"
    },
    "716": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "jump": "i",
      "offset": [
        1243,
        1296
      ],
      "op": "JUMP",
      "path": "139"
    },
    "717": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1243,
        1296
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "718": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1243,
        1296
      ],
      "op": "POP",
      "path": "139"
    },
    "719": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1195,
        1307
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "720": {
      "offset": [
        422,
        488
      ],
      "op": "PUSH32",
      "path": "139",
      "value": "0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143"
    },
    "753": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1484,
        1505
      ],
      "op": "DUP1",
      "path": "139"
    },
    "754": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1484,
        1505
      ],
      "op": "SLOAD",
      "path": "139"
    },
    "755": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1484,
        1505
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0xFF"
    },
    "757": {
      "branch": 25,
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1484,
        1505
      ],
      "op": "AND",
      "path": "139"
    },
    "758": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1479,
        2129
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x3E2"
    },
    "761": {
      "branch": 25,
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1479,
        2129
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "762": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1597,
        1625
      ],
      "op": "DUP1",
      "path": "139",
      "statement": 8
    },
    "763": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1597,
        1625
      ],
      "op": "SLOAD",
      "path": "139"
    },
    "764": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "766": {
      "op": "NOT"
    },
    "767": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1597,
        1625
      ],
      "op": "AND",
      "path": "139"
    },
    "768": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1621,
        1625
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x1"
    },
    "770": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1597,
        1625
      ],
      "op": "OR",
      "path": "139"
    },
    "771": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1597,
        1625
      ],
      "op": "DUP2",
      "path": "139"
    },
    "772": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1597,
        1625
      ],
      "op": "SSTORE",
      "path": "139"
    },
    "773": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "PUSH1",
      "path": "139",
      "statement": 9,
      "value": "0x40"
    },
    "775": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "MLOAD",
      "path": "139"
    },
    "776": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "778": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "780": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "782": {
      "op": "SHL"
    },
    "783": {
      "op": "SUB"
    },
    "784": {
      "op": "DUP4"
    },
    "785": {
      "op": "AND"
    },
    "786": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x24"
    },
    "788": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "DUP3",
      "path": "139"
    },
    "789": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "ADD",
      "path": "139"
    },
    "790": {
      "op": "MSTORE"
    },
    "791": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1639,
        1798
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x34E"
    },
    "794": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1639,
        1798
      ],
      "op": "SWAP1",
      "path": "139"
    },
    "795": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1685,
        1702
      ],
      "op": "DUP7",
      "path": "139"
    },
    "796": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1685,
        1702
      ],
      "op": "SWAP1",
      "path": "139"
    },
    "797": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "799": {
      "op": "ADD"
    },
    "800": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x40"
    },
    "802": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "DUP1",
      "path": "139"
    },
    "803": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "MLOAD",
      "path": "139"
    },
    "804": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "806": {
      "op": "NOT"
    },
    "807": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "DUP2",
      "path": "139"
    },
    "808": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "DUP5",
      "path": "139"
    },
    "809": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "SUB",
      "path": "139"
    },
    "810": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "ADD",
      "path": "139"
    },
    "811": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "DUP2",
      "path": "139"
    },
    "812": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "MSTORE",
      "path": "139"
    },
    "813": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "SWAP2",
      "path": "139"
    },
    "814": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "SWAP1",
      "path": "139"
    },
    "815": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "MSTORE",
      "path": "139"
    },
    "816": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x20"
    },
    "818": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "DUP2",
      "path": "139"
    },
    "819": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "ADD",
      "path": "139"
    },
    "820": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "DUP1",
      "path": "139"
    },
    "821": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "MLOAD",
      "path": "139"
    },
    "822": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "824": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "826": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "828": {
      "op": "SHL"
    },
    "829": {
      "op": "SUB"
    },
    "830": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "AND",
      "path": "139"
    },
    "831": {
      "op": "PUSH4",
      "value": "0x1B2CE7F3"
    },
    "836": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "838": {
      "op": "SHL"
    },
    "839": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "OR",
      "path": "139"
    },
    "840": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "SWAP1",
      "path": "139"
    },
    "841": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1720,
        1784
      ],
      "op": "MSTORE",
      "path": "139"
    },
    "842": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1639,
        1667
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x485"
    },
    "845": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "jump": "i",
      "offset": [
        1639,
        1798
      ],
      "op": "JUMP",
      "path": "139"
    },
    "846": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1639,
        1798
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "847": {
      "op": "POP"
    },
    "848": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1812,
        1841
      ],
      "op": "DUP1",
      "path": "139",
      "statement": 10
    },
    "849": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1812,
        1841
      ],
      "op": "SLOAD",
      "path": "139"
    },
    "850": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "852": {
      "op": "NOT"
    },
    "853": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1812,
        1841
      ],
      "op": "AND",
      "path": "139"
    },
    "854": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1812,
        1841
      ],
      "op": "DUP2",
      "path": "139"
    },
    "855": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1812,
        1841
      ],
      "op": "SSTORE",
      "path": "139"
    },
    "856": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "858": {
      "op": "DUP1"
    },
    "859": {
      "op": "MLOAD"
    },
    "860": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "862": {
      "op": "PUSH2",
      "value": "0x796"
    },
    "865": {
      "op": "DUP4"
    },
    "866": {
      "op": "CODECOPY"
    },
    "867": {
      "op": "DUP2"
    },
    "868": {
      "op": "MLOAD"
    },
    "869": {
      "op": "SWAP2"
    },
    "870": {
      "op": "MSTORE"
    },
    "871": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1380,
        1434
      ],
      "op": "SLOAD",
      "path": "148"
    },
    "872": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "874": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "876": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "878": {
      "op": "SHL"
    },
    "879": {
      "op": "SUB"
    },
    "880": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1907,
        1948
      ],
      "op": "DUP4",
      "path": "139",
      "statement": 11
    },
    "881": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1907,
        1948
      ],
      "op": "DUP2",
      "path": "139"
    },
    "882": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1907,
        1948
      ],
      "op": "AND",
      "path": "139"
    },
    "883": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1380,
        1434
      ],
      "op": "SWAP2",
      "path": "148"
    },
    "884": {
      "fn": "ERC1967Upgrade._getImplementation",
      "offset": [
        1380,
        1434
      ],
      "op": "AND",
      "path": "148"
    },
    "885": {
      "branch": 26,
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1907,
        1948
      ],
      "op": "EQ",
      "path": "139"
    },
    "886": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x3D9"
    },
    "889": {
      "branch": 26,
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "890": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x40"
    },
    "892": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "MLOAD",
      "path": "139"
    },
    "893": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "897": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "899": {
      "op": "SHL"
    },
    "900": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "DUP2",
      "path": "139"
    },
    "901": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "MSTORE",
      "path": "139"
    },
    "902": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "904": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x4"
    },
    "906": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "DUP3",
      "path": "139"
    },
    "907": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "ADD",
      "path": "139"
    },
    "908": {
      "op": "MSTORE"
    },
    "909": {
      "op": "PUSH1",
      "value": "0x2F"
    },
    "911": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "913": {
      "op": "DUP3"
    },
    "914": {
      "op": "ADD"
    },
    "915": {
      "op": "MSTORE"
    },
    "916": {
      "op": "PUSH32",
      "value": "0x45524331393637557067726164653A207570677261646520627265616B732066"
    },
    "949": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "951": {
      "op": "DUP3"
    },
    "952": {
      "op": "ADD"
    },
    "953": {
      "op": "MSTORE"
    },
    "954": {
      "op": "PUSH15",
      "value": "0x757274686572207570677261646573"
    },
    "970": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "972": {
      "op": "SHL"
    },
    "973": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "975": {
      "op": "DUP3"
    },
    "976": {
      "op": "ADD"
    },
    "977": {
      "op": "MSTORE"
    },
    "978": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "980": {
      "op": "ADD"
    },
    "981": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x1FB"
    },
    "984": {
      "op": "JUMP"
    },
    "985": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1899,
        2000
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "986": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        2089,
        2118
      ],
      "op": "PUSH2",
      "path": "139",
      "statement": 12,
      "value": "0x3E2"
    },
    "989": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        2100,
        2117
      ],
      "op": "DUP6",
      "path": "139"
    },
    "990": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        2089,
        2099
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x4B1"
    },
    "993": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "jump": "i",
      "offset": [
        2089,
        2118
      ],
      "op": "JUMP",
      "path": "139"
    },
    "994": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        2089,
        2118
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "995": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1036,
        2135
      ],
      "op": "POP",
      "path": "139"
    },
    "996": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        1036,
        2135
      ],
      "op": "POP",
      "path": "139"
    },
    "997": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        894,
        2135
      ],
      "op": "POP",
      "path": "139"
    },
    "998": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        894,
        2135
      ],
      "op": "POP",
      "path": "139"
    },
    "999": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "offset": [
        894,
        2135
      ],
      "op": "POP",
      "path": "139"
    },
    "1000": {
      "fn": "UUPSUpgradeableLegacyMock._upgradeToAndCallSecureLegacyV1",
      "jump": "o",
      "offset": [
        894,
        2135
      ],
      "op": "JUMP",
      "path": "139"
    },
    "1001": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        628,
        888
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "1002": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1004": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1006": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1008": {
      "op": "SHL"
    },
    "1009": {
      "op": "SUB"
    },
    "1010": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "DUP2",
      "path": "206",
      "statement": 13
    },
    "1011": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "AND",
      "path": "206"
    },
    "1012": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "EXTCODESIZE",
      "path": "206"
    },
    "1013": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "PUSH2",
      "path": "139",
      "statement": 14,
      "value": "0x456"
    },
    "1016": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "JUMPI",
      "path": "139"
    },
    "1017": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x40"
    },
    "1019": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "MLOAD",
      "path": "139"
    },
    "1020": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1024": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1026": {
      "op": "SHL"
    },
    "1027": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "DUP2",
      "path": "139"
    },
    "1028": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "MSTORE",
      "path": "139"
    },
    "1029": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1031": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "PUSH1",
      "path": "139",
      "value": "0x4"
    },
    "1033": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "DUP3",
      "path": "139"
    },
    "1034": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "ADD",
      "path": "139"
    },
    "1035": {
      "op": "MSTORE"
    },
    "1036": {
      "op": "PUSH1",
      "value": "0x2D"
    },
    "1038": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1040": {
      "op": "DUP3"
    },
    "1041": {
      "op": "ADD"
    },
    "1042": {
      "op": "MSTORE"
    },
    "1043": {
      "op": "PUSH32",
      "value": "0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E"
    },
    "1076": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1078": {
      "op": "DUP3"
    },
    "1079": {
      "op": "ADD"
    },
    "1080": {
      "op": "MSTORE"
    },
    "1081": {
      "op": "PUSH13",
      "value": "0x1BDD08184818DBDB9D1C9858DD"
    },
    "1095": {
      "op": "PUSH1",
      "value": "0x9A"
    },
    "1097": {
      "op": "SHL"
    },
    "1098": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1100": {
      "op": "DUP3"
    },
    "1101": {
      "op": "ADD"
    },
    "1102": {
      "op": "MSTORE"
    },
    "1103": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1105": {
      "op": "ADD"
    },
    "1106": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "PUSH2",
      "path": "139",
      "value": "0x1FB"
    },
    "1109": {
      "op": "JUMP"
    },
    "1110": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        702,
        797
      ],
      "op": "JUMPDEST",
      "path": "139"
    },
    "1111": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1113": {
      "op": "DUP1"
    },
    "1114": {
      "op": "MLOAD"
    },
    "1115": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1117": {
      "op": "PUSH2",
      "value": "0x796"
    },
    "1120": {
      "op": "DUP4"
    },
    "1121": {
      "op": "CODECOPY"
    },
    "1122": {
      "op": "DUP2"
    },
    "1123": {
      "op": "MLOAD"
    },
    "1124": {
      "op": "SWAP2"
    },
    "1125": {
      "op": "MSTORE"
    },
    "1126": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "DUP1",
      "path": "139",
      "statement": 15
    },
    "1127": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "SLOAD",
      "path": "139"
    },
    "1128": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1130": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1132": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1134": {
      "op": "SHL"
    },
    "1135": {
      "op": "SUB"
    },
    "1136": {
      "op": "NOT"
    },
    "1137": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "AND",
      "path": "139"
    },
    "1138": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1140": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1142": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1144": {
      "op": "SHL"
    },
    "1145": {
      "op": "SUB"
    },
    "1146": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "SWAP3",
      "path": "139"
    },
    "1147": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "SWAP1",
      "path": "139"
    },
    "1148": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "SWAP3",
      "path": "139"
    },
    "1149": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "AND",
      "path": "139"
    },
    "1150": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "SWAP2",
      "path": "139"
    },
    "1151": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "SWAP1",
      "path": "139"
    },
    "1152": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "SWAP2",
      "path": "139"
    },
    "1153": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "OR",
      "path": "139"
    },
    "1154": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "SWAP1",
      "path": "139"
    },
    "1155": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "offset": [
        807,
        881
      ],
      "op": "SSTORE",
      "path": "139"
    },
    "1156": {
      "fn": "UUPSUpgradeableLegacyMock.__setImplementation",
      "jump": "o",
      "offset": [
        628,
        888
      ],
      "op": "JUMP",
      "path": "139"
    },
    "1157": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6570,
        6768
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1158": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6653,
        6665
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x60"
    },
    "1160": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "PUSH2",
      "path": "206",
      "statement": 16,
      "value": "0x4AA"
    },
    "1163": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6705,
        6711
      ],
      "op": "DUP4",
      "path": "206"
    },
    "1164": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6713,
        6717
      ],
      "op": "DUP4",
      "path": "206"
    },
    "1165": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x40"
    },
    "1167": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "MLOAD",
      "path": "206"
    },
    "1168": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "DUP1",
      "path": "206"
    },
    "1169": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x60"
    },
    "1171": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "ADD",
      "path": "206"
    },
    "1172": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x40"
    },
    "1174": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "MSTORE",
      "path": "206"
    },
    "1175": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "DUP1",
      "path": "206"
    },
    "1176": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x27"
    },
    "1178": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "DUP2",
      "path": "206"
    },
    "1179": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "MSTORE",
      "path": "206"
    },
    "1180": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x20"
    },
    "1182": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "ADD",
      "path": "206"
    },
    "1183": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x7B6"
    },
    "1186": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x27"
    },
    "1188": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "SWAP2",
      "path": "206"
    },
    "1189": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "CODECOPY",
      "path": "206"
    },
    "1190": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6704
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x4F1"
    },
    "1193": {
      "fn": "Address.functionDelegateCall",
      "jump": "i",
      "offset": [
        6684,
        6761
      ],
      "op": "JUMP",
      "path": "206"
    },
    "1194": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6684,
        6761
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1195": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6677,
        6761
      ],
      "op": "SWAP4",
      "path": "206"
    },
    "1196": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6570,
        6768
      ],
      "op": "SWAP3",
      "path": "206"
    },
    "1197": {
      "op": "POP"
    },
    "1198": {
      "op": "POP"
    },
    "1199": {
      "op": "POP"
    },
    "1200": {
      "fn": "Address.functionDelegateCall",
      "jump": "o",
      "offset": [
        6570,
        6768
      ],
      "op": "JUMP",
      "path": "206"
    },
    "1201": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        1897,
        2049
      ],
      "op": "JUMPDEST",
      "path": "148"
    },
    "1202": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        1963,
        2000
      ],
      "op": "PUSH2",
      "path": "148",
      "statement": 17,
      "value": "0x4BA"
    },
    "1205": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        1982,
        1999
      ],
      "op": "DUP2",
      "path": "148"
    },
    "1206": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        1963,
        1981
      ],
      "op": "PUSH2",
      "path": "148",
      "value": "0x3E9"
    },
    "1209": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "jump": "i",
      "offset": [
        1963,
        2000
      ],
      "op": "JUMP",
      "path": "148"
    },
    "1210": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        1963,
        2000
      ],
      "op": "JUMPDEST",
      "path": "148"
    },
    "1211": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        2015,
        2042
      ],
      "op": "PUSH1",
      "path": "148",
      "statement": 18,
      "value": "0x40"
    },
    "1213": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        2015,
        2042
      ],
      "op": "MLOAD",
      "path": "148"
    },
    "1214": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1216": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1218": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1220": {
      "op": "SHL"
    },
    "1221": {
      "op": "SUB"
    },
    "1222": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        2015,
        2042
      ],
      "op": "DUP3",
      "path": "148"
    },
    "1223": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        2015,
        2042
      ],
      "op": "AND",
      "path": "148"
    },
    "1224": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        2015,
        2042
      ],
      "op": "SWAP1",
      "path": "148"
    },
    "1225": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        2015,
        2042
      ],
      "op": "PUSH32",
      "path": "148",
      "value": "0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B"
    },
    "1258": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        2015,
        2042
      ],
      "op": "SWAP1",
      "path": "148"
    },
    "1259": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        2015,
        2042
      ],
      "op": "PUSH1",
      "path": "148",
      "value": "0x0"
    },
    "1261": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        2015,
        2042
      ],
      "op": "SWAP1",
      "path": "148"
    },
    "1262": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        2015,
        2042
      ],
      "op": "LOG2",
      "path": "148"
    },
    "1263": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "offset": [
        1897,
        2049
      ],
      "op": "POP",
      "path": "148"
    },
    "1264": {
      "fn": "ERC1967Upgrade._upgradeTo",
      "jump": "o",
      "offset": [
        1897,
        2049
      ],
      "op": "JUMP",
      "path": "148"
    },
    "1265": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6954,
        7341
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1266": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7095,
        7107
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x60"
    },
    "1268": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1270": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1272": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1274": {
      "op": "SHL"
    },
    "1275": {
      "op": "SUB"
    },
    "1276": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "DUP5",
      "path": "206"
    },
    "1277": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "AND",
      "path": "206"
    },
    "1278": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "EXTCODESIZE",
      "path": "206"
    },
    "1279": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "PUSH2",
      "path": "206",
      "statement": 19,
      "value": "0x559"
    },
    "1282": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "JUMPI",
      "path": "206"
    },
    "1283": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x40"
    },
    "1285": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "MLOAD",
      "path": "206"
    },
    "1286": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1290": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1292": {
      "op": "SHL"
    },
    "1293": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "DUP2",
      "path": "206"
    },
    "1294": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "MSTORE",
      "path": "206"
    },
    "1295": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1297": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x4"
    },
    "1299": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "DUP3",
      "path": "206"
    },
    "1300": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "ADD",
      "path": "206"
    },
    "1301": {
      "op": "MSTORE"
    },
    "1302": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1304": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1306": {
      "op": "DUP3"
    },
    "1307": {
      "op": "ADD"
    },
    "1308": {
      "op": "MSTORE"
    },
    "1309": {
      "op": "PUSH32",
      "value": "0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F"
    },
    "1342": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1344": {
      "op": "DUP3"
    },
    "1345": {
      "op": "ADD"
    },
    "1346": {
      "op": "MSTORE"
    },
    "1347": {
      "op": "PUSH6",
      "value": "0x1B9D1C9858DD"
    },
    "1354": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "1356": {
      "op": "SHL"
    },
    "1357": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1359": {
      "op": "DUP3"
    },
    "1360": {
      "op": "ADD"
    },
    "1361": {
      "op": "MSTORE"
    },
    "1362": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1364": {
      "op": "ADD"
    },
    "1365": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x1FB"
    },
    "1368": {
      "op": "JUMP"
    },
    "1369": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7119,
        7188
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1370": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7200,
        7212
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x0"
    },
    "1372": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7214,
        7237
      ],
      "op": "DUP1",
      "path": "206"
    },
    "1373": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7247
      ],
      "op": "DUP6",
      "path": "206"
    },
    "1374": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1380": {
      "op": "SHL"
    },
    "1381": {
      "op": "SUB"
    },
    "1382": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7260
      ],
      "op": "AND",
      "path": "206"
    },
    "1383": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7261,
        7265
      ],
      "op": "DUP6",
      "path": "206"
    },
    "1384": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x40"
    },
    "1386": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "MLOAD",
      "path": "206"
    },
    "1387": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x574"
    },
    "1390": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "SWAP2",
      "path": "206"
    },
    "1391": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "SWAP1",
      "path": "206"
    },
    "1392": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x746"
    },
    "1395": {
      "fn": "Address.functionDelegateCall",
      "jump": "i",
      "offset": [
        7241,
        7266
      ],
      "op": "JUMP",
      "path": "206"
    },
    "1396": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1397": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x0"
    },
    "1399": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x40"
    },
    "1401": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "MLOAD",
      "path": "206"
    },
    "1402": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "DUP1",
      "path": "206"
    },
    "1403": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "DUP4",
      "path": "206"
    },
    "1404": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "SUB",
      "path": "206"
    },
    "1405": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "DUP2",
      "path": "206"
    },
    "1406": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "DUP6",
      "path": "206"
    },
    "1407": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "GAS",
      "path": "206"
    },
    "1408": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "DELEGATECALL",
      "path": "206"
    },
    "1409": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "SWAP2",
      "path": "206"
    },
    "1410": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "POP",
      "path": "206"
    },
    "1411": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "POP",
      "path": "206"
    },
    "1412": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "RETURNDATASIZE",
      "path": "206"
    },
    "1413": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "DUP1",
      "path": "206"
    },
    "1414": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x0"
    },
    "1416": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "DUP2",
      "path": "206"
    },
    "1417": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "EQ",
      "path": "206"
    },
    "1418": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x5AF"
    },
    "1421": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "JUMPI",
      "path": "206"
    },
    "1422": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x40"
    },
    "1424": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "MLOAD",
      "path": "206"
    },
    "1425": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "SWAP2",
      "path": "206"
    },
    "1426": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "POP",
      "path": "206"
    },
    "1427": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x1F"
    },
    "1429": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "NOT",
      "path": "206"
    },
    "1430": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x3F"
    },
    "1432": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "RETURNDATASIZE",
      "path": "206"
    },
    "1433": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "ADD",
      "path": "206"
    },
    "1434": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "AND",
      "path": "206"
    },
    "1435": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "DUP3",
      "path": "206"
    },
    "1436": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "ADD",
      "path": "206"
    },
    "1437": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x40"
    },
    "1439": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "MSTORE",
      "path": "206"
    },
    "1440": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "RETURNDATASIZE",
      "path": "206"
    },
    "1441": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "DUP3",
      "path": "206"
    },
    "1442": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "MSTORE",
      "path": "206"
    },
    "1443": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "RETURNDATASIZE",
      "path": "206"
    },
    "1444": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x0"
    },
    "1446": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x20"
    },
    "1448": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "DUP5",
      "path": "206"
    },
    "1449": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "ADD",
      "path": "206"
    },
    "1450": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "RETURNDATACOPY",
      "path": "206"
    },
    "1451": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x5B4"
    },
    "1454": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "JUMP",
      "path": "206"
    },
    "1455": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1456": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x60"
    },
    "1458": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "SWAP2",
      "path": "206"
    },
    "1459": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "POP",
      "path": "206"
    },
    "1460": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1461": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7241,
        7266
      ],
      "op": "POP",
      "path": "206"
    },
    "1462": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7199,
        7266
      ],
      "op": "SWAP2",
      "path": "206"
    },
    "1463": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7199,
        7266
      ],
      "op": "POP",
      "path": "206"
    },
    "1464": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7199,
        7266
      ],
      "op": "SWAP2",
      "path": "206"
    },
    "1465": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7199,
        7266
      ],
      "op": "POP",
      "path": "206"
    },
    "1466": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7283,
        7334
      ],
      "op": "PUSH2",
      "path": "206",
      "statement": 20,
      "value": "0x5C4"
    },
    "1469": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7300,
        7307
      ],
      "op": "DUP3",
      "path": "206"
    },
    "1470": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7309,
        7319
      ],
      "op": "DUP3",
      "path": "206"
    },
    "1471": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7321,
        7333
      ],
      "op": "DUP7",
      "path": "206"
    },
    "1472": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7283,
        7299
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x5CE"
    },
    "1475": {
      "fn": "Address.functionDelegateCall",
      "jump": "i",
      "offset": [
        7283,
        7334
      ],
      "op": "JUMP",
      "path": "206"
    },
    "1476": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7283,
        7334
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1477": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        7276,
        7334
      ],
      "op": "SWAP7",
      "path": "206"
    },
    "1478": {
      "fn": "Address.functionDelegateCall",
      "offset": [
        6954,
        7341
      ],
      "op": "SWAP6",
      "path": "206"
    },
    "1479": {
      "op": "POP"
    },
    "1480": {
      "op": "POP"
    },
    "1481": {
      "op": "POP"
    },
    "1482": {
      "op": "POP"
    },
    "1483": {
      "op": "POP"
    },
    "1484": {
      "op": "POP"
    },
    "1485": {
      "fn": "Address.functionDelegateCall",
      "jump": "o",
      "offset": [
        6954,
        7341
      ],
      "op": "JUMP",
      "path": "206"
    },
    "1486": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7561,
        8253
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1487": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7707,
        7719
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x60"
    },
    "1489": {
      "branch": 27,
      "fn": "Address.verifyCallResult",
      "offset": [
        7735,
        7742
      ],
      "op": "DUP4",
      "path": "206"
    },
    "1490": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "ISZERO",
      "path": "206"
    },
    "1491": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x5DD"
    },
    "1494": {
      "branch": 27,
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "JUMPI",
      "path": "206"
    },
    "1495": {
      "op": "POP"
    },
    "1496": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7765,
        7775
      ],
      "op": "DUP2",
      "path": "206",
      "statement": 21
    },
    "1497": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7758,
        7775
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x4AA"
    },
    "1500": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7758,
        7775
      ],
      "op": "JUMP",
      "path": "206"
    },
    "1501": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1502": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7893
      ],
      "op": "DUP3",
      "path": "206"
    },
    "1503": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7893
      ],
      "op": "MLOAD",
      "path": "206"
    },
    "1504": {
      "branch": 28,
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7897
      ],
      "op": "ISZERO",
      "path": "206"
    },
    "1505": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8237
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x5ED"
    },
    "1508": {
      "branch": 28,
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8237
      ],
      "op": "JUMPI",
      "path": "206"
    },
    "1509": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8070,
        8080
      ],
      "op": "DUP3",
      "path": "206"
    },
    "1510": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8064,
        8081
      ],
      "op": "MLOAD",
      "path": "206"
    },
    "1511": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8130,
        8145
      ],
      "op": "DUP1",
      "path": "206"
    },
    "1512": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8117,
        8127
      ],
      "op": "DUP5",
      "path": "206"
    },
    "1513": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8113,
        8115
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x20"
    },
    "1515": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8109,
        8128
      ],
      "op": "ADD",
      "path": "206"
    },
    "1516": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8102,
        8146
      ],
      "op": "REVERT",
      "path": "206"
    },
    "1517": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8237
      ],
      "op": "JUMPDEST",
      "path": "206"
    },
    "1518": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8209,
        8221
      ],
      "op": "DUP2",
      "path": "206",
      "statement": 22
    },
    "1519": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x40"
    },
    "1521": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "MLOAD",
      "path": "206"
    },
    "1522": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1526": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1528": {
      "op": "SHL"
    },
    "1529": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "DUP2",
      "path": "206"
    },
    "1530": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "MSTORE",
      "path": "206"
    },
    "1531": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH1",
      "path": "206",
      "value": "0x4"
    },
    "1533": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "ADD",
      "path": "206"
    },
    "1534": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x1FB"
    },
    "1537": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "SWAP2",
      "path": "206"
    },
    "1538": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "SWAP1",
      "path": "206"
    },
    "1539": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH2",
      "path": "206",
      "value": "0x762"
    },
    "1542": {
      "fn": "Address.verifyCallResult",
      "jump": "i",
      "offset": [
        8202,
        8222
      ],
      "op": "JUMP",
      "path": "206"
    },
    "1543": {
      "op": "JUMPDEST"
    },
    "1544": {
      "op": "DUP1"
    },
    "1545": {
      "op": "CALLDATALOAD"
    },
    "1546": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1548": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1550": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1552": {
      "op": "SHL"
    },
    "1553": {
      "op": "SUB"
    },
    "1554": {
      "op": "DUP2"
    },
    "1555": {
      "op": "AND"
    },
    "1556": {
      "op": "DUP2"
    },
    "1557": {
      "op": "EQ"
    },
    "1558": {
      "op": "PUSH2",
      "value": "0x61E"
    },
    "1561": {
      "op": "JUMPI"
    },
    "1562": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1564": {
      "op": "DUP1"
    },
    "1565": {
      "op": "REVERT"
    },
    "1566": {
      "op": "JUMPDEST"
    },
    "1567": {
      "op": "SWAP2"
    },
    "1568": {
      "op": "SWAP1"
    },
    "1569": {
      "op": "POP"
    },
    "1570": {
      "jump": "o",
      "op": "JUMP"
    },
    "1571": {
      "op": "JUMPDEST"
    },
    "1572": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1574": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1576": {
      "op": "DUP3"
    },
    "1577": {
      "op": "DUP5"
    },
    "1578": {
      "op": "SUB"
    },
    "1579": {
      "op": "SLT"
    },
    "1580": {
      "op": "ISZERO"
    },
    "1581": {
      "op": "PUSH2",
      "value": "0x635"
    },
    "1584": {
      "op": "JUMPI"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1587": {
      "op": "DUP1"
    },
    "1588": {
      "op": "REVERT"
    },
    "1589": {
      "op": "JUMPDEST"
    },
    "1590": {
      "op": "PUSH2",
      "value": "0x4AA"
    },
    "1593": {
      "op": "DUP3"
    },
    "1594": {
      "op": "PUSH2",
      "value": "0x607"
    },
    "1597": {
      "jump": "i",
      "op": "JUMP"
    },
    "1598": {
      "op": "JUMPDEST"
    },
    "1599": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1604": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1606": {
      "op": "SHL"
    },
    "1607": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1609": {
      "op": "MSTORE"
    },
    "1610": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "1612": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1614": {
      "op": "MSTORE"
    },
    "1615": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1617": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1619": {
      "op": "REVERT"
    },
    "1620": {
      "op": "JUMPDEST"
    },
    "1621": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1623": {
      "op": "DUP1"
    },
    "1624": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1626": {
      "op": "DUP4"
    },
    "1627": {
      "op": "DUP6"
    },
    "1628": {
      "op": "SUB"
    },
    "1629": {
      "op": "SLT"
    },
    "1630": {
      "op": "ISZERO"
    },
    "1631": {
      "op": "PUSH2",
      "value": "0x667"
    },
    "1634": {
      "op": "JUMPI"
    },
    "1635": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1637": {
      "op": "DUP1"
    },
    "1638": {
      "op": "REVERT"
    },
    "1639": {
      "op": "JUMPDEST"
    },
    "1640": {
      "op": "PUSH2",
      "value": "0x670"
    },
    "1643": {
      "op": "DUP4"
    },
    "1644": {
      "op": "PUSH2",
      "value": "0x607"
    },
    "1647": {
      "jump": "i",
      "op": "JUMP"
    },
    "1648": {
      "op": "JUMPDEST"
    },
    "1649": {
      "op": "SWAP2"
    },
    "1650": {
      "op": "POP"
    },
    "1651": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1653": {
      "op": "DUP4"
    },
    "1654": {
      "op": "ADD"
    },
    "1655": {
      "op": "CALLDATALOAD"
    },
    "1656": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1665": {
      "op": "DUP1"
    },
    "1666": {
      "op": "DUP3"
    },
    "1667": {
      "op": "GT"
    },
    "1668": {
      "op": "ISZERO"
    },
    "1669": {
      "op": "PUSH2",
      "value": "0x68D"
    },
    "1672": {
      "op": "JUMPI"
    },
    "1673": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1675": {
      "op": "DUP1"
    },
    "1676": {
      "op": "REVERT"
    },
    "1677": {
      "op": "JUMPDEST"
    },
    "1678": {
      "op": "DUP2"
    },
    "1679": {
      "op": "DUP6"
    },
    "1680": {
      "op": "ADD"
    },
    "1681": {
      "op": "SWAP2"
    },
    "1682": {
      "op": "POP"
    },
    "1683": {
      "op": "DUP6"
    },
    "1684": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1686": {
      "op": "DUP4"
    },
    "1687": {
      "op": "ADD"
    },
    "1688": {
      "op": "SLT"
    },
    "1689": {
      "op": "PUSH2",
      "value": "0x6A1"
    },
    "1692": {
      "op": "JUMPI"
    },
    "1693": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1695": {
      "op": "DUP1"
    },
    "1696": {
      "op": "REVERT"
    },
    "1697": {
      "op": "JUMPDEST"
    },
    "1698": {
      "op": "DUP2"
    },
    "1699": {
      "op": "CALLDATALOAD"
    },
    "1700": {
      "op": "DUP2"
    },
    "1701": {
      "op": "DUP2"
    },
    "1702": {
      "op": "GT"
    },
    "1703": {
      "op": "ISZERO"
    },
    "1704": {
      "op": "PUSH2",
      "value": "0x6B3"
    },
    "1707": {
      "op": "JUMPI"
    },
    "1708": {
      "op": "PUSH2",
      "value": "0x6B3"
    },
    "1711": {
      "op": "PUSH2",
      "value": "0x63E"
    },
    "1714": {
      "jump": "i",
      "op": "JUMP"
    },
    "1715": {
      "op": "JUMPDEST"
    },
    "1716": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1718": {
      "op": "MLOAD"
    },
    "1719": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1721": {
      "op": "DUP3"
    },
    "1722": {
      "op": "ADD"
    },
    "1723": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1725": {
      "op": "NOT"
    },
    "1726": {
      "op": "SWAP1"
    },
    "1727": {
      "op": "DUP2"
    },
    "1728": {
      "op": "AND"
    },
    "1729": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "1731": {
      "op": "ADD"
    },
    "1732": {
      "op": "AND"
    },
    "1733": {
      "op": "DUP2"
    },
    "1734": {
      "op": "ADD"
    },
    "1735": {
      "op": "SWAP1"
    },
    "1736": {
      "op": "DUP4"
    },
    "1737": {
      "op": "DUP3"
    },
    "1738": {
      "op": "GT"
    },
    "1739": {
      "op": "DUP2"
    },
    "1740": {
      "op": "DUP4"
    },
    "1741": {
      "op": "LT"
    },
    "1742": {
      "op": "OR"
    },
    "1743": {
      "op": "ISZERO"
    },
    "1744": {
      "op": "PUSH2",
      "value": "0x6DB"
    },
    "1747": {
      "op": "JUMPI"
    },
    "1748": {
      "op": "PUSH2",
      "value": "0x6DB"
    },
    "1751": {
      "op": "PUSH2",
      "value": "0x63E"
    },
    "1754": {
      "jump": "i",
      "op": "JUMP"
    },
    "1755": {
      "op": "JUMPDEST"
    },
    "1756": {
      "op": "DUP2"
    },
    "1757": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1759": {
      "op": "MSTORE"
    },
    "1760": {
      "op": "DUP3"
    },
    "1761": {
      "op": "DUP2"
    },
    "1762": {
      "op": "MSTORE"
    },
    "1763": {
      "op": "DUP9"
    },
    "1764": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1766": {
      "op": "DUP5"
    },
    "1767": {
      "op": "DUP8"
    },
    "1768": {
      "op": "ADD"
    },
    "1769": {
      "op": "ADD"
    },
    "1770": {
      "op": "GT"
    },
    "1771": {
      "op": "ISZERO"
    },
    "1772": {
      "op": "PUSH2",
      "value": "0x6F4"
    },
    "1775": {
      "op": "JUMPI"
    },
    "1776": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1778": {
      "op": "DUP1"
    },
    "1779": {
      "op": "REVERT"
    },
    "1780": {
      "op": "JUMPDEST"
    },
    "1781": {
      "op": "DUP3"
    },
    "1782": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1784": {
      "op": "DUP7"
    },
    "1785": {
      "op": "ADD"
    },
    "1786": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1788": {
      "op": "DUP4"
    },
    "1789": {
      "op": "ADD"
    },
    "1790": {
      "op": "CALLDATACOPY"
    },
    "1791": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1793": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1795": {
      "op": "DUP5"
    },
    "1796": {
      "op": "DUP4"
    },
    "1797": {
      "op": "ADD"
    },
    "1798": {
      "op": "ADD"
    },
    "1799": {
      "op": "MSTORE"
    },
    "1800": {
      "op": "DUP1"
    },
    "1801": {
      "op": "SWAP6"
    },
    "1802": {
      "op": "POP"
    },
    "1803": {
      "op": "POP"
    },
    "1804": {
      "op": "POP"
    },
    "1805": {
      "op": "POP"
    },
    "1806": {
      "op": "POP"
    },
    "1807": {
      "op": "POP"
    },
    "1808": {
      "op": "SWAP3"
    },
    "1809": {
      "op": "POP"
    },
    "1810": {
      "op": "SWAP3"
    },
    "1811": {
      "op": "SWAP1"
    },
    "1812": {
      "op": "POP"
    },
    "1813": {
      "jump": "o",
      "op": "JUMP"
    },
    "1814": {
      "op": "JUMPDEST"
    },
    "1815": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1817": {
      "op": "JUMPDEST"
    },
    "1818": {
      "op": "DUP4"
    },
    "1819": {
      "op": "DUP2"
    },
    "1820": {
      "op": "LT"
    },
    "1821": {
      "op": "ISZERO"
    },
    "1822": {
      "op": "PUSH2",
      "value": "0x731"
    },
    "1825": {
      "op": "JUMPI"
    },
    "1826": {
      "op": "DUP2"
    },
    "1827": {
      "op": "DUP2"
    },
    "1828": {
      "op": "ADD"
    },
    "1829": {
      "op": "MLOAD"
    },
    "1830": {
      "op": "DUP4"
    },
    "1831": {
      "op": "DUP3"
    },
    "1832": {
      "op": "ADD"
    },
    "1833": {
      "op": "MSTORE"
    },
    "1834": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1836": {
      "op": "ADD"
    },
    "1837": {
      "op": "PUSH2",
      "value": "0x719"
    },
    "1840": {
      "op": "JUMP"
    },
    "1841": {
      "op": "JUMPDEST"
    },
    "1842": {
      "op": "DUP4"
    },
    "1843": {
      "op": "DUP2"
    },
    "1844": {
      "op": "GT"
    },
    "1845": {
      "op": "ISZERO"
    },
    "1846": {
      "op": "PUSH2",
      "value": "0x740"
    },
    "1849": {
      "op": "JUMPI"
    },
    "1850": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1852": {
      "op": "DUP5"
    },
    "1853": {
      "op": "DUP5"
    },
    "1854": {
      "op": "ADD"
    },
    "1855": {
      "op": "MSTORE"
    },
    "1856": {
      "op": "JUMPDEST"
    },
    "1857": {
      "op": "POP"
    },
    "1858": {
      "op": "POP"
    },
    "1859": {
      "op": "POP"
    },
    "1860": {
      "op": "POP"
    },
    "1861": {
      "jump": "o",
      "op": "JUMP"
    },
    "1862": {
      "op": "JUMPDEST"
    },
    "1863": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1865": {
      "op": "DUP3"
    },
    "1866": {
      "op": "MLOAD"
    },
    "1867": {
      "op": "PUSH2",
      "value": "0x758"
    },
    "1870": {
      "op": "DUP2"
    },
    "1871": {
      "op": "DUP5"
    },
    "1872": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1874": {
      "op": "DUP8"
    },
    "1875": {
      "op": "ADD"
    },
    "1876": {
      "op": "PUSH2",
      "value": "0x716"
    },
    "1879": {
      "jump": "i",
      "op": "JUMP"
    },
    "1880": {
      "op": "JUMPDEST"
    },
    "1881": {
      "op": "SWAP2"
    },
    "1882": {
      "op": "SWAP1"
    },
    "1883": {
      "op": "SWAP2"
    },
    "1884": {
      "op": "ADD"
    },
    "1885": {
      "op": "SWAP3"
    },
    "1886": {
      "op": "SWAP2"
    },
    "1887": {
      "op": "POP"
    },
    "1888": {
      "op": "POP"
    },
    "1889": {
      "jump": "o",
      "op": "JUMP"
    },
    "1890": {
      "op": "JUMPDEST"
    },
    "1891": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1893": {
      "op": "DUP2"
    },
    "1894": {
      "op": "MSTORE"
    },
    "1895": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1897": {
      "op": "DUP3"
    },
    "1898": {
      "op": "MLOAD"
    },
    "1899": {
      "op": "DUP1"
    },
    "1900": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1902": {
      "op": "DUP5"
    },
    "1903": {
      "op": "ADD"
    },
    "1904": {
      "op": "MSTORE"
    },
    "1905": {
      "op": "PUSH2",
      "value": "0x781"
    },
    "1908": {
      "op": "DUP2"
    },
    "1909": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1911": {
      "op": "DUP6"
    },
    "1912": {
      "op": "ADD"
    },
    "1913": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1915": {
      "op": "DUP8"
    },
    "1916": {
      "op": "ADD"
    },
    "1917": {
      "op": "PUSH2",
      "value": "0x716"
    },
    "1920": {
      "jump": "i",
      "op": "JUMP"
    },
    "1921": {
      "op": "JUMPDEST"
    },
    "1922": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1924": {
      "op": "ADD"
    },
    "1925": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1927": {
      "op": "NOT"
    },
    "1928": {
      "op": "AND"
    },
    "1929": {
      "op": "SWAP2"
    },
    "1930": {
      "op": "SWAP1"
    },
    "1931": {
      "op": "SWAP2"
    },
    "1932": {
      "op": "ADD"
    },
    "1933": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1935": {
      "op": "ADD"
    },
    "1936": {
      "op": "SWAP3"
    },
    "1937": {
      "op": "SWAP2"
    },
    "1938": {
      "op": "POP"
    },
    "1939": {
      "op": "POP"
    },
    "1940": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "f4507a50a1e5f7a50a53476d2fdb467e8036ecbd",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./UUPSUpgradeableMock.sol\";\n\n// This contract implements the pre-4.5 UUPS upgrade function with a rollback test.\n// It's used to test that newer UUPS contracts are considered valid upgrades by older UUPS contracts.\ncontract UUPSUpgradeableLegacyMock is UUPSUpgradeableMock {\n    // Inlined from ERC1967Upgrade\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    // ERC1967Upgrade._setImplementation is private so we reproduce it here.\n    // An extra underscore prevents a name clash error.\n    function __setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    function _upgradeToAndCallSecureLegacyV1(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        __setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    // hooking into the old mechanism\n    function upgradeTo(address newImplementation) external virtual override {\n        _upgradeToAndCallSecureLegacyV1(newImplementation, bytes(\"\"), false);\n    }\n\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual override {\n        _upgradeToAndCallSecureLegacyV1(newImplementation, data, false);\n    }\n}\n",
  "sourceMap": "281:2249:139:-:0;;;1088:4:156;1045:48;;281:2249:139;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin/contracts/mocks/UUPS/UUPSLegacy.sol",
  "type": "contract"
}